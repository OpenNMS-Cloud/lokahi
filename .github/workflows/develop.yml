name: Develop Workflow

on:
  push:
    branches:
      - 'develop'
  pull_request:
# This workflow is triggered instead of individual workflows that filter based on paths.
# If we want to fully separate individual workflows out of this one, we need fully reproducible builds.
# Just use this one for now. The downside is it will run redundant workflows for code that didn't change.
    branches:
      - 'develop'
    paths-ignore:
      - '.github/**'
      - 'CHANGELOG/**'
      - 'build-tools/**'
      - 'doc/**'
      - 'tooling/**'
      - 'tools/**'
  workflow_call:
    inputs:
      image-tag:
        description: 'Tag for all images'
        required: false
        type: string
      image-registry:
        description: 'Docker image registry for all images'
        required: false
        type: string

jobs:
  alert:
    name: Alert Service
    uses: ./.github/workflows/feature-alert.yml
    secrets: inherit
    with:
      image-tag: ${{ inputs.image-tag || github.sha }}
      image-registry: ${{ inputs.image-registry || 'ghcr.io' }}
  datachoices:
    name: DataChoices Service
    uses: ./.github/workflows/feature-datachoices.yml
    secrets: inherit
    with:
      image-tag: ${{ inputs.image-tag || github.sha }}
      image-registry: ${{ inputs.image-registry || 'ghcr.io' }}
  events:
    name: Event Service
    uses: ./.github/workflows/feature-events.yml
    secrets: inherit
    with:
      image-tag: ${{ inputs.image-tag || github.sha }}
      image-registry: ${{ inputs.image-registry || 'ghcr.io' }}
  grafana:
    name: Grafana
    uses: ./.github/workflows/feature-grafana.yml
    secrets: inherit
    with:
      image-tag: ${{ inputs.image-tag || github.sha }}
      image-registry: ${{ inputs.image-registry || 'ghcr.io' }}
  inventory:
    name: Inventory Service
    uses: ./.github/workflows/feature-inventory.yml
    secrets: inherit
    with:
      image-tag: ${{ inputs.image-tag || github.sha }}
      image-registry: ${{ inputs.image-registry || 'ghcr.io' }}
  keycloak-ui:
    name: Keycloak
    uses: ./.github/workflows/feature-keycloak-ui.yml
    secrets: inherit
    with:
      image-tag: ${{ inputs.image-tag || github.sha }}
      image-registry: ${{ inputs.image-registry || 'ghcr.io' }}
  metrics-processor:
    name: Metrics Processor Service
    uses: ./.github/workflows/feature-metrics-processor.yml
    secrets: inherit
    with:
      image-tag: ${{ inputs.image-tag || github.sha }}
      image-registry: ${{ inputs.image-registry || 'ghcr.io' }}
  minion:
    name: Minion
    uses: ./.github/workflows/feature-minion.yml
    secrets: inherit
    with:
      image-tag: ${{ inputs.image-tag || github.sha }}
      image-registry: ${{ inputs.image-registry || 'ghcr.io' }}
  minion-gateway:
    name: Minion Gateway Service
    uses: ./.github/workflows/feature-minion-gateway.yml
    secrets: inherit
    with:
      image-tag: ${{ inputs.image-tag || github.sha }}
      image-registry: ${{ inputs.image-registry || 'ghcr.io' }}
  minion-certificate-manager:
    name: Minion Certificate Manager
    uses: ./.github/workflows/feature-minion-certificate-manager.yml
    secrets: inherit
    with:
      image-tag: ${{ inputs.image-tag || github.sha }}
      image-registry: ${{ inputs.image-registry || 'ghcr.io' }}
  minion-certificate-verifier:
    name: Minion Certificate Verifier
    uses: ./.github/workflows/feature-minion-certificate-verifier.yml
    secrets: inherit
    with:
      image-tag: ${{ inputs.image-tag || github.sha }}
      image-registry: ${{ inputs.image-registry || 'ghcr.io' }}
  notifications:
    name: Notification Service
    uses: ./.github/workflows/feature-notifications.yml
    secrets: inherit
    with:
      image-tag: ${{ inputs.image-tag || github.sha }}
      image-registry: ${{ inputs.image-registry || 'ghcr.io' }}
  parent-pom:
    name: Parent POM
    uses: ./.github/workflows/feature-parent-pom.yml
    secrets: inherit
  rest-server:
    name: Vue.js BFF
    uses: ./.github/workflows/feature-rest-server.yml
    secrets: inherit
    with:
      image-tag: ${{ inputs.image-tag || github.sha }}
      image-registry: ${{ inputs.image-registry || 'ghcr.io' }}
  shared-lib:
    name: Shared Library
    uses: ./.github/workflows/feature-shared-lib.yml
    secrets: inherit
  ui:
    name: Vue.js UI
    uses: ./.github/workflows/feature-ui.yml
    secrets: inherit
    with:
      image-tag: ${{ inputs.image-tag || github.sha }}
      image-registry: ${{ inputs.image-registry || 'ghcr.io' }}
  external-it:
    name: End-to-end Tests
    needs: [
      alert,
      datachoices,
      events,
      grafana,
      inventory,
      keycloak-ui,
      metrics-processor,
      minion,
      minion-gateway,
      minion-certificate-manager,
      minion-certificate-verifier,
      notifications,
      rest-server,
      ui
    ]
    runs-on:
      labels: ubuntu-latest-8-cores
    timeout-minutes: 30 # Prevents hung workflows on the larger runners from costing more than necessary
    steps:

      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ inputs.image-registry || 'ghcr.io' }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Maven dependencies
        uses: ./.github/actions/maven-cache
        with:
          cache-key-hash: ${{ hashFiles('external-it/**/pom.xml') }}

      - name: Create & set up cluster
        shell: bash
        working-directory: install-local
        run: |          
          # Setup localhost DNS
          sudo echo "127.0.0.1 onmshs" | sudo tee -a /etc/hosts
          
          # Build cluster with Horizon Stream installed.
          ./install-local.sh cicd onmshs "${{ inputs.image-tag || github.sha }}" "${{ inputs.image-registry || 'ghcr.io' }}/opennms-cloud"

          echo ""
          echo "=================="
          echo "K8S CLUSTER STATUS"
          echo "=================="
          date
          kubectl -n hs-instance get all

      - name: Set up & run Cucumber tests
        shell: bash
        working-directory: external-it
        run: |
          # Cucumber test
          mvn install
          INGRESS_BASE_URL=https://onmshs
          KEYCLOAK_BASE_URL=https://onmshs/auth
          KEYCLOAK_REALM=opennms
          KEYCLOAK_USERNAME=admin
          KEYCLOAK_PASSWORD=admin
          KEYCLOAK_CLIENT_ID=lokahi
          MINION_IMAGE_NAME=${{ inputs.image-registry || 'ghcr.io' }}/opennms-cloud/lokahi-minion:${{ inputs.image-tag || github.sha }}
          MINION_INGRESS_URL=$(hostname)
          MINION_INGRESS_PORT=443
          MINION_INGRESS_TLS=true
          MINION_INGRESS_CA=$(realpath ../install-local/tmp/ca.crt)
          MINION_INGRESS_OVERRIDE_AUTHORITY=minion.onmshs
          
          export INGRESS_BASE_URL KEYCLOAK_BASE_URL KEYCLOAK_REALM KEYCLOAK_USERNAME KEYCLOAK_PASSWORD KEYCLOAK_CLIENT_ID
          export MINION_IMAGE_NAME MINION_INGRESS_URL MINION_INGRESS_PORT MINION_INGRESS_TLS MINION_INGRESS_CA MINION_INGRESS_OVERRIDE_AUTHORITY
          PROJECT_VERSION="$(mvn -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive -q org.codehaus.mojo:exec-maven-plugin:1.6.0:exec)"
          java -jar "external-lokahi-it/target/external-lokahi-it-${PROJECT_VERSION}.jar"

          ## If fail, exit which kills the ci-cd workflow.
          ##for i in $(jq '.[0].elements[].steps[].result.status' external-it/external-lokahi-it/cucumber.reports/cucumber-report.json);do
          ##  if [[ $i != '"passed"' ]];then
          ##    exit;
          ##  fi
          ##done

      - name: Diag after failure
        if: ${{ failure() }}
        shell: bash
        run: |
            echo "K8S CLUSTER STATUS"
            kubectl -n hs-instance get all

            echo "K8S CLUSTER SECRETS"
            kubectl -n hs-instance get secrets

            echo ""

            for pod in $(kubectl -n hs-instance get pod | awk '$1 != "NAME" { print $1; }')
            do
                echo ""
                echo "=== DIAG POD ${pod} ==="
                echo ""
                kubectl -n hs-instance describe "pod/${pod#pod/}" | sed 's,^,    ,'
            done

            echo ""
            echo "=== K8S APPLICATION LOGS ==="
            kubectl logs -n hs-instance -l appdomain=opennms --tail=-1 --prefix --all-containers --ignore-errors=true

            echo ${{ github.ref  }}

  update:
    name: Update

    # Need this to trigger only when PR is merged or there is a push to
    # develop (default) branch. All testing is already complete.
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@v3
        with:
          repository: OpenNMS-Cloud/fabric-services
          token: ${{ secrets.GH_TOKEN }}
          fetch-depth: 0
          # How can we add the functionality from 'git clone --filter=tree:0
          # <url>' in this checkout? This would save us from pulling more than
          # what we need.
      - name: update
        shell: bash
        run: |

          git config --global user.email jaberry@opennms.com
          git config --global user.name jaberry

          git remote add hs https://github.com/OpenNMS-Cloud/lokahi.git

          git checkout from-develop

          git fetch hs develop
          git reset --hard FETCH_HEAD
          git push
          git checkout trunk
          git merge from-develop
          git push
