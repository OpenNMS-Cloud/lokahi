apiVersion: v1
kind: ConfigMap
metadata:
  annotations:
    meta.helm.sh/release-name: prometheus
    meta.helm.sh/release-namespace: prometheus
  labels:
    app.kubernetes.io/instance: prometheus
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: grafana
    app.kubernetes.io/version: 8.0.3
    helm.sh/chart: grafana-6.13.6
  name: grafana
data:
  grafana.ini: |
    [analytics]
    check_for_updates = true
    [grafana_net]
    url = https://grafana.net
    [log]
    mode = console
    [paths]
    data = /var/lib/grafana/
    logs = /var/log/grafana
    plugins = /var/lib/grafana/plugins
    provisioning = /etc/grafana/provisioning

    # COMMENT OUT WHEN DONE DEBUGGING
    [log]
    #level = debug
    level = trace

    #################################### SECURITY ####################################
    [security]
    disable_initial_admin_creation = false
    
    # Only available in Grafana v6.5+.
    
    # Disable creation of admin user on first start of Grafana. Default is false.
    admin_user = place_holder_for_k8s_secret
    
    # The name of the default Grafana Admin user, who has full permissions. Default is admin.
    admin_password = place_holder_for_k8s_secret

    #################################### Server ##############################
    [server]
    # Protocol (http, https, h2, socket)
    protocol = http
    
    # The ip address to bind to, empty will bind to all interfaces
    http_addr =
    
    # The http port to use
    #http_port = 3000
    http_port = 
    
    # The public facing domain name used to access grafana from a browser
    domain = onmshs
    #domain = localhostkey
    
    # Redirect to correct domain if host header does not match domain
    # Prevents DNS rebinding attacks
    enforce_domain = false
    
    # The full public facing url
    #root_url = %(protocol)s://%(domain)s:%(http_port)s/grafana
    root_url = %(protocol)s://%(domain)s/grafana
    
    # Serve Grafana from subpath specified in `root_url` setting. By default it is set to `false` for compatibility reasons.
    #serve_from_sub_path = false
    serve_from_sub_path: true

    # Log web requests
    router_logging = false
    
    # the path relative working path
    static_root_path = public
    
    # enable gzip
    enable_gzip = false
    
    # https certs & key file
    cert_file =
    cert_key =
    
    # Unix socket path
    socket = /tmp/grafana.sock
    
    # CDN Url
    cdn_url =
    
    # Sets the maximum time in minutes before timing out read of an incoming request and closing idle connections.
    # `0` means there is no timeout for reading the request.
    read_timeout = 0

    ##################################### auth.proxy ##############################

    #[auth.proxy]
    ## Defaults to false, but set to true to enable this feature
    #enabled = true
    ## HTTP Header name that will contain the username or email
    #header_name = X-WEBAUTH-USER
    ## HTTP Header property, defaults to `username` but can also be `email`
    #header_property = username
    ## Set to `true` to enable auto sign up of users who do not exist in Grafana DB. Defaults to `true`.
    #auto_sign_up = true
    ## Define cache time to live in minutes
    ## If combined with Grafana LDAP integration it is also the sync interval
    #sync_ttl = 60
    ## Limit where auth proxy requests come from by configuring a list of IP addresses.
    ## This can be used to prevent users spoofing the X-WEBAUTH-USER header.
    ## Example `whitelist = 192.168.1.1, 192.168.1.0/24, 2001::23, 2001::0/120`
    #whitelist =
    ## Optionally define more headers to sync other user attributes
    ## Example `headers = Name:X-WEBAUTH-NAME Role:X-WEBAUTH-ROLE Email:X-WEBAUTH-EMAIL Groups:X-WEBAUTH-GROUPS`
    #headers =
    ## Check out docs on this for more details on the below setting
    #enable_login_token = true

    ########ADDED FOR KEYCLOAK############
    
    [auth.generic_oauth]
    enabled = true
    scopes = openid email profile
    name = Oauth
    tls_skip_verify_insecure = true
    allow_sign_up = true
    client_id = grafana
    client_secret = grafana-client-secret
    auth_url =  https://onmshs/auth/realms/opennms/protocol/openid-connect/auth

    # The following point to the service in the cluster.
    token_url = https://keycloak:8443/auth/realms/opennms/protocol/openid-connect/token
    api_url =   https://keycloak:8443/auth/realms/opennms/protocol/openid-connect/userinfo
