/*******************************************************************************
 * This file is part of OpenNMS(R).
 *
 * Copyright (C) 2022 The OpenNMS Group, Inc.
 * OpenNMS(R) is Copyright (C) 1999-2022 The OpenNMS Group, Inc.
 *
 * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.
 *
 * OpenNMS(R) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * OpenNMS(R) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with OpenNMS(R).  If not, see:
 *      http://www.gnu.org/licenses/
 *
 * For more information contact:
 *     OpenNMS(R) Licensing <license@opennms.org>
 *     http://www.opennms.org/
 *     http://www.opennms.com/
 *******************************************************************************/
syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

package opennms.inventory;
option java_multiple_files = true;
option java_package = "org.opennms.horizon.shared.alert.policy";

message MonitorPolicyProto {
  int64 id = 1;
  string tenantId = 2;
  string name = 3;
  string memo = 4;
  repeated PolicyRuleProto rules = 5;
  repeated string tags = 6;
  bool notifyByEmail = 7;
  bool notifyByPagerDuty = 8;
  bool notifyByWebhooks = 9;
  string notifyInstruction = 10;
}

enum ComponentType {
  UNKNOWN_CONTENT = 0;
  CPU = 1;
  INTERFACE = 2;
  STORAGE = 3;
  NODE = 4;
}

message PolicyRuleProto {
  int64 id = 1;
  string tenantId = 2;
  string name = 3;
  ComponentType componentType = 4;
  repeated SNMPEventProto snmpEvents = 5;
}

message SNMPEventProto {
  int64 id = 1;
  string tenantId = 2;
  SNMPEventType triggerEvent = 3;
  int32 count = 4;
  int32 overtime = 5;
  OverTimeUnit overtimeUnit = 6;
  Severity severity = 7;
  SNMPEventType clearEvent = 8;
}

//TBD
/*message InternalTriggerEvent {

}*/

enum OverTimeUnit {
  UNKNOWN_UNIT = 0;
  SECOND = 1;
  MINUTE = 2;
  HOUR = 3;
}

enum SNMPEventType {
  UNKNOWN_EVENT = 0;
  COLD_REBOOT = 1;
  SNMP_AUTH_FAILURE = 2;
  PORT_DOWN = 3;
  PORT_UP = 4;
}

enum Severity {
  UNKNOWN_SEVERITY = 0;
  WARNING = 1;
  MINOR = 2;
  MAJOR = 3;
  CRITICAL = 4;
}

message MonitorPolicyList {
  repeated MonitorPolicyProto policies = 1;
}

service MonitorPolicyService {
  rpc createPolicy(MonitorPolicyProto) returns(MonitorPolicyProto);
  rpc listPolicies(google.protobuf.Empty) returns(MonitorPolicyList);
  rpc getPolicyById(google.protobuf.Int64Value) returns(MonitorPolicyProto);
}









