/*******************************************************************************
 * This file is part of OpenNMS(R).
 *
 * Copyright (C) 2009-2017 The OpenNMS Group, Inc.
 * OpenNMS(R) is Copyright (C) 1999-2017 The OpenNMS Group, Inc.
 *
 * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.
 *
 * OpenNMS(R) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * OpenNMS(R) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with OpenNMS(R).  If not, see:
 *      http://www.gnu.org/licenses/
 *
 * For more information contact:
 *     OpenNMS(R) Licensing <license@opennms.org>
 *     http://www.opennms.org/
 *     http://www.opennms.com/
 *******************************************************************************/

//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.0.3-b01-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2009.01.29 at 01:15:48 PM EST 
//


package org.opennms.netmgt.provision.persistence.dto;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.stream.Collectors;
import javax.validation.ValidationException;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.extern.slf4j.Slf4j;
import org.springframework.core.io.Resource;

@Data
@Slf4j
public class RequisitionDTO implements Serializable {

    private static final long serialVersionUID = 1629774241824443273L;
    public static final String IMPORTED = "imported";

    protected Map<String, RequisitionNodeDTO> nodes = new HashMap<>();
    protected Date dateStamp = new Date();
    protected String foreignSource = IMPORTED;
    protected Date lastImport;
    @EqualsAndHashCode.Exclude
    private String id;

    /** the resource that this requisition was created from **/
    private transient Resource resource;

    /**
     * <p>Constructor for RequisitionDTO.</p>
     *
     * @param id a {@link String} object.
     */
    public RequisitionDTO(final String id) {
        this.id = id;
    }


    /**
     * <p>getNode</p>
     *
     * @param foreignId a {@link String} object.
     * @return a {@link RequisitionNodeDTO} object.
     */
    public RequisitionNodeDTO getNode(String foreignId) {
        return nodes.get(foreignId);
    }

    /**
     * <p>removeNode</p>
     *
     * @param node a {@link RequisitionNodeDTO} object.
     */
    public void deleteNode(RequisitionNodeDTO node) {
        deleteNode(node.getForeignId());
    }

    /**
     * <p>deleteNode</p>
     *
     * @param foreignId a {@link String} object.
     */
    public void deleteNode(final String foreignId) {
        nodes.remove(foreignId);
    }

    /**
     * <p>putNode</p>
     *
     * @param node a {@link RequisitionNodeDTO} object.
     */
    public void putNode(final RequisitionNodeDTO node) {
        nodes.put(node.getForeignId(), node);
    }

    /**
     * <p>updateDateStamp</p>
     */
    public void updateDateStamp() {
        dateStamp = new Date();
    }

    /**
     * <p>setForeignSource</p>
     *
     * @param value a {@link String} object.
     */
    public void setForeignSource(final String value) {
        if (value == null) {
            foreignSource = IMPORTED;
        }
        else {
            foreignSource = value;
        }
    }

    /**
     * Update the last imported stamp to the current date and time
     */
    public void updateLastImported() {
        lastImport = new Date();
    }
    
    /**
     * <p>getNodeCount</p>
     *
     * @return a int.
     */
    public int getNodeCount() {
        return nodes.size();
    }
    
    /**
     * Make sure that no data in the requisition is inconsistent.  Nodes should be unique,
     * interfaces should be unique per node, etc.
     */
    public void validate() throws ValidationException {
    	final Map<String,Integer> foreignSourceCounts = new HashMap<>();

    	if (foreignSource == null) {
    	    throw new ValidationException("RequisitionDTO 'foreign-source' must be set!");
    	}
    	if (foreignSource.contains("/")) {
            throw new ValidationException("Foreign Source (" + foreignSource + ") contains invalid characters. ('/' is forbidden.)");
    	}

        for (final RequisitionNodeDTO node : nodes.values()) {
    		final String foreignId = node.getForeignId();
    		node.validate();
			Integer count = foreignSourceCounts.get(foreignId);
			foreignSourceCounts.put(foreignId, count == null? 1 : ++count);
    	}

        List<String> errors = foreignSourceCounts.entrySet().stream().filter(en1 -> en1.getValue() > 1).
                map(en -> String.format("%s ( %d found)")).collect(Collectors.toList());

    	if (errors.size() > 0) {
    		final StringBuilder sb = new StringBuilder();
    		sb.append("Duplicate nodes found on foreign source ").append(getForeignSource()).append(": ");

            String errorList = errors.stream().collect(Collectors.joining(", "));
    		throw new ValidationException(sb.append(errorList).toString());
    	}
    }
}
