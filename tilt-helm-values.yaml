Namespace: tilt-instance
hostname: onmshs.local
HostIp: 127.0.0.1
port: 1443
protocol: https
TLS:
  Enabled: True
  CertificateGeneration: false
  Cert:
    Name: opennms-ui-certificate
Keycloak:
  AdminPassword: admin
  HostnamePort: 1443
  HostnameAdminUrl: https://onmshs.local:1443/auth

MailServer:
  Enabled: true

Citus:
  Enabled: true

OpenNMS:
  global:
    openTelemetry:
      otlpTracesEndpoint: "http://tempo:4317"
  Alert:
    resources:
      limits:
        cpu: '0'
        memory: '0'
      requests:
        cpu: '0'
        memory: '0'
  api:
    resources:
      limits:
        cpu: '0'
        memory: '0'
      requests:
        cpu: '0'
        memory: '0'
    CorsAllowed: true
    playgroundGuiEnabled: true
    introspectionEnabled: true
  UI:
    resources:
      limits:
        cpu: '0'
        memory: '0'
      requests:
        cpu: '0'
        memory: '0'
    IngressAnnotations:
      nginx.ingress.kubernetes.io/configuration-snippet: ~
  MetricsProcessor:
    resources:
      limits:
        cpu: '0'
        memory: '0'
      requests:
        cpu: '0'
        memory: '0'
  Minion:
    Enabled: true
    addDefaultLocation: true
    resources:
      limits:
        cpu: '0'
        memory: '0'
      requests:
        cpu: '0'
        memory: '0'
  MinionGateway:
    resources:
      limits:
        cpu: '0'
        memory: '0'
      requests:
        cpu: '0'
        memory: '0'
    IngressAnnotations:
      nginx.ingress.kubernetes.io/configuration-snippet: |
        # This adds the tenant-id and location to the response headers sent to the client so we can use them in
        # logging. This is bit circuitous, and it is unnecessary to send these to the client, but this was a way I
        # could figure out how to get the tenant and minion information in the logs using $sent_http_x_tenant_id
        # and $sent_http_x_location once these response headers are added. They also seem to need to be in the
        # location block to work.
        # Note: The response headers are prefixed with "x-", although the headers from the auth service are not.
        # Note: I am being a little naughty and depending an internal implementation detail of ingress-nginx by
        # using the authHeader* variables. These are created by ingress-nginx from the auth-response-headers
        # annotation. The naming of the authHeader* variables is sensitive to the order of the headers in the
        # nginx.ingress.kubernetes.io/auth-response-headers annotation.
        add_header x-tenant-id "$authHeader0" always;
        add_header x-location "$authHeader1" always;
        set $dummy_val "$opentelemetry_context_traceparent"; # workaround for https://github.com/kubernetes/ingress-nginx/issues/9811
        grpc_set_header 'traceparent' $opentelemetry_context_traceparent; # This doesn't get sent downstream normally. :(
        opentelemetry_attribute "user" "$authHeader0";
        opentelemetry_attribute "location" "$authHeader1";
    env:
      DEBUG_SPAN_FULL_MESSAGE: "true"
      DEBUG_SPAN_CONTENT: "true"
  MinionCertificateManager:
    Enabled: true
    CaSecretName: root-ca-certificate
    MtlsSecretName: client-root-ca-certificate
    resources:
      limits:
        cpu: '0'
        memory: '0'
      requests:
        cpu: '0'
        memory: '0'
  MinionCertificateVerifier:
    resources:
      limits:
        cpu: '0'
        memory: '0'
      requests:
        cpu: '0'
        memory: '0'
  Inventory:
    resources:
      limits:
        cpu: '0'
        memory: '0'
      requests:
        cpu: '0'
        memory: '0'
  Notification:
    resources:
      limits:
        cpu: '0'
        memory: '0'
      requests:
        cpu: '0'
        memory: '0'
  Events:
    resources:
      limits:
        cpu: '0'
        memory: '0'
      requests:
        cpu: '0'
        memory: '0'
  DataChoices:
    resources:
      limits:
        cpu: '0'
        memory: '0'
      requests:
        cpu: '0'
        memory: '0'
  Core:
    resources:
      limits:
        cpu: '0'
        memory: 4Gi
      requests:
        cpu: '0'
        memory: 2Gi
Grafana:
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 100m
      memory: 100Mi
  autoAssignOrgRole: Admin  # https://grafana.com/docs/grafana/latest/setup-grafana/configure-grafana/#auto_assign_org_role
Prometheus:
  Server:
    resources:
      limits:
        cpu: "1"
        memory: 512Mi
      requests:
        cpu: 100m
        memory: 100Mi
  PushGateway:
    resources:
      limits:
        cpu: "1"
        memory: 512Mi
      requests:
        cpu: 100m
        memory: 100Mi
Kafka:
  LocalPort: 24092
