apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.OpenNMS.events.serviceName }}
  labels:
    app: {{ .Values.OpenNMS.events.serviceName }}
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: {{ .Values.OpenNMS.events.serviceName }}
  replicas: {{ .Values.OpenNMS.events.replicas }}
  template:
    metadata:
      labels:
        appdomain: opennms
        app: {{ .Values.OpenNMS.events.serviceName }}
      annotations:
        prometheus.io/scrape: "{{ .Values.prometheus.scrape }}"
        prometheus.io/port: "{{ .Values.prometheus.prometheusPort }}"
        prometheus.io/path: "{{ .Values.prometheus.prometheusPath }}"
        # roll the deployment when the Spring boot environment variable configmap changes
        checksum/spring-boot-env-configmap: {{ include (print $.Template.BasePath "/opennms/spring-boot-env-configmap.yaml") . | sha256sum }}
        kubectl.kubernetes.io/default-container: "{{ .Values.OpenNMS.events.serviceName }}"
    spec:
      {{- if .Values.nodeRestrictions.enabled }}
      nodeSelector:                                                                                    
        {{ .Values.nodeRestrictions.key }}: {{ .Values.nodeRestrictions.value }}                       
      tolerations:
        - effect: "NoSchedule"                                                                         
          key: "{{ .Values.nodeRestrictions.key }}"                                                    
          operator: "Equal"
          value: {{ .Values.nodeRestrictions.value }} 
      affinity: 
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:                                             
          - weight: 1                                                                                  
            preference:                                                                                
              matchExpressions:                                                                        
              - key: "{{ .Values.nodeRestrictions.key }}"                                              
                operator: In
                values:                                                                                
                - {{ .Values.nodeRestrictions.value }}                                                 
      {{- end }}
      volumes:
        - name: {{ .Values.OpenNMS.global.springBoot.configMapVolumeName }}
          configMap:
            name: {{ .Values.OpenNMS.global.springBoot.configMapName }}
      {{- if .Values.citus.enabled }}
      initContainers:
        - name: wait-for-db
          image: postgres:16-alpine
          args:
          - /bin/sh
          - -c
          - | 
            set -x;
            while ! psql -U {{ .Values.citus.adminUser }} -h postgres -c 'select 1'; do
              echo "Waiting for DB to be available"
              sleep 10
            done
            echo "Database is available"
      {{- end }}
      containers:
        - name: {{ .Values.OpenNMS.events.serviceName }}
          image: {{ include "lokahi.image" (dict "Values" .Values "thisService" .Values.OpenNMS.events) | quote }}
          imagePullPolicy: {{ .Values.OpenNMS.global.imagePullPolicy }}
          env:
            - name: JAVA_TOOL_OPTIONS
              value: "-XX:MaxRAMPercentage=50 -javaagent:agent/opentelemetry-javaagent.jar -agentlib:jdwp=transport=dt_socket,server=y,address=5005,suspend=n,quiet=y"  # FIXME: Permanent debug port, enable only for dev mode
            - name: SPRING_DATASOURCE_URL
              value: "jdbc:postgresql://{{ .Values.OpenNMS.global.databaseHost }}:5432/{{ .Values.OpenNMS.global.databaseName }}?currentSchema={{ .Values.OpenNMS.events.databaseSchemaName }}"
            - name: SPRING_DATASOURCE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: postgres
                  key: eventsUser
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres
                  key: eventsPwd
            - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
              value: "{{ .Values.OpenNMS.global.kafkaClient.bootstrapServers }}"
            - name: GRPC_URL_INVENTORY
              value: "{{ .Values.OpenNMS.inventory.serviceName }}:6565"
            # Do not put any env variables below this. The lokahi.development.env include should be last
            # in the 'env' section so variables can be overridden with Helm chart values when needed.
            {{- include "lokahi.deployment.env" (dict "Values" .Values "thisService" .Values.OpenNMS.events) | nindent 12 }}
          envFrom:
          - configMapRef:
              name: spring-boot-env
          {{- include "lokahi.kafkaSecretFrom" .Values.OpenNMS.events | indent 10 }}
          ports:  
           {{- range $port := .Values.OpenNMS.events.ports }}
           - name: {{ $port.name }}
             containerPort: {{ $port.containerPort }}
           {{- end }}
          volumeMounts:
            - name: {{ .Values.OpenNMS.global.springBoot.configMapVolumeName }}
              mountPath: {{ .Values.OpenNMS.global.springBoot.mountPath }}
          livenessProbe:
            httpGet:
              path: "{{ .Values.livenessProbe.path }}"
              port: {{ .Values.livenessProbe.port }}
              scheme: {{ .Values.livenessProbe.scheme }}
            initialDelaySeconds: 20
            timeoutSeconds: 1
            periodSeconds: 2
            successThreshold: 1
            failureThreshold: 150
          readinessProbe:
            httpGet:
              path: "{{ .Values.readinessProbe.path }}"
              port: {{ .Values.readinessProbe.port }}
              scheme: {{ .Values.readinessProbe.scheme }}
            initialDelaySeconds: 20
            timeoutSeconds: 1
            periodSeconds: 2
            successThreshold: 1
            failureThreshold: 250
          resources:
            limits:
              cpu: "{{ .Values.OpenNMS.events.resources.limits.cpu }}"
              memory: "{{ .Values.OpenNMS.events.resources.limits.memory }}"
            requests:
              cpu: "{{ .Values.OpenNMS.events.resources.requests.cpu }}"
              memory: "{{ .Values.OpenNMS.events.resources.requests.memory }}"
      {{- if .Values.OpenNMS.global.privateRepoEnabled }}
      imagePullSecrets:
        - name: image-credentials
      {{- end }}
