{{- if .Values.TLS.CertificateGeneration }}
apiVersion: v1
kind: Secret
metadata:
  name: root-ca-certificate
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/resource-policy": keep
type: kubernetes.io/tls
data:
  # There is no existing certificate, lets generate a new one
  {{ $ca := genCA (nospace (cat .Values.hostname "-ca")) 14 }}
  ca.crt: >-
    {{ b64enc $ca.Cert }}
  tls.crt: >-
    {{ b64enc $ca.Cert }}
  tls.key: >-
    {{ b64enc $ca.Key }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.OpenNMS.MinionGateway.TlsSecretName }}
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/resource-policy": keep
type: kubernetes.io/tls
data:
  {{ $mgCert := genSignedCert (nospace (cat "minion." .Values.Host)) nil (list (nospace (cat "minion." .Values.Host))) 14 $ca }}
  ca.crt: >-
    {{b64enc $ca.Cert }}
  tls.crt: >-
    {{b64enc $mgCert.Cert }}
  tls.key: >-
    {{b64enc $mgCert.Key }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.OpenNMS.UI.TlsSecretName }}
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/resource-policy": keep
type: kubernetes.io/tls
data:
  {{ $uiCert := genSignedCert .Values.hostname nil (list .Values.hostname) 14 $ca }}
  ca.crt: >-
    {{b64enc $ca.Cert }}
  tls.crt: >-
    {{b64enc $uiCert.Cert }}
  tls.key: >-
    {{b64enc $uiCert.Key }}

{{- end }}
