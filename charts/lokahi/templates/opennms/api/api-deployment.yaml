apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.openNMS.api.serviceName }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ .Values.openNMS.api.serviceName }}
    app.kubernetes.io/name: {{ .Values.openNMS.api.serviceName }}
  annotations:
    autoupdate: "true"
spec:
  replicas: {{ .Values.openNMS.api.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.openNMS.api.serviceName }}
  template:
    metadata:
      labels:
        appdomain: opennms
        app: {{ .Values.openNMS.api.serviceName }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/actuator/prometheus"
        # roll the deployment when the Spring boot environment variable configmap changes
        checksum/spring-boot-env-configmap: {{ include (print $.Template.BasePath "/opennms/spring-boot-env-configmap.yaml") . | sha256sum }}
        kubectl.kubernetes.io/default-container: "{{ .Values.openNMS.api.serviceName }}"
    spec:
      {{ if .Values.nodeRestrictions.enabled }}
      nodeSelector:
        {{ .Values.nodeRestrictions.key }}: {{ .Values.nodeRestrictions.value }}
      tolerations:
        - effect: "NoSchedule"
          key: "{{ .Values.nodeRestrictions.key }}"
          operator: "Equal"
          value: {{ .Values.nodeRestrictions.value }}
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              preference:
                matchExpressions:
                  - key: "{{ .Values.nodeRestrictions.key }}"
                    operator: In
                    values:
                      - {{ .Values.nodeRestrictions.value }}
      {{ end }}
      terminationGracePeriodSeconds: 120
      volumes:
        - name: spring-boot-app-config-volume
          configMap:
            name: spring-boot-app-config
      containers:
        - name: {{ .Values.openNMS.api.serviceName }}
          image: {{ include "lokahi.image" (dict "Values" .Values "thisService" .Values.openNMS.api) | quote }}
          imagePullPolicy: {{ .Values.global.imagePullPolicy }}
          env:
            - name: JAVA_TOOL_OPTIONS
              value: "-XX:MaxRAMPercentage=50 -javaagent:agent/opentelemetry-javaagent.jar -agentlib:jdwp=transport=dt_socket,server=y,address=5005,suspend=n,quiet=y"  # FIXME: Permanent debug port, enable only for dev mode
            - name: SPRING_CACHE_CAFFEINE_SPEC
              value: "maximumSize=10000,expireAfterWrite=60s"
            - name: TSDB_URL
              value: "{{ .Values.cortexClient.protocol }}://{{ .Values.cortexClient.hostRead }}:{{ .Values.cortexClient.portRead }}{{ .Values.cortexClient.pathRead }}"
            - name: SPRING_WEBFLUX_BASE_PATH
              value: /api
            - name: GRAPHQL_SPQR_GUI_TARGET_ENDPOINT
              value: /api/graphql
            {{- if .Values.openNMS.api.playgroundGuiEnabled }}
            - name: GRAPHQL_SPQR_GUI_ENABLED
              value: "true"
            {{- else }}
            - name: GRAPHQL_SPQR_GUI_ENABLED
              value: "false"
            {{- end }}
            - name: GRPC_URL_INVENTORY
              value: "{{ .Values.openNMS.inventory.serviceName }}:6565"
            - name: GRPC_URL_EVENTS
              value: "{{ .Values.openNMS.events.serviceName }}:6565"
            - name: GRPC_URL_NOTIFICATION
              value: "{{ .Values.openNMS.notification.serviceName }}:6565"
            - name: GRPC_URL_ALERT
              value: "{{ .Values.openNMS.alert.serviceName }}:6565"
            - name: GRPC_URL_MINION_CERTIFICATE_MANAGER
              value: {{ if or (eq .Values.openNMS.api.certificateManagerUrl "") (eq .Values.openNMS.api.certificateManagerUrl "dev")
                }}"{{ .Values.openNMS.minionCertificateManager.serviceName }}:8990"{{
              else
                }}"{{ .Values.openNMS.api.certificateManagerUrl }}"{{ end }}
            - name: GRPC_URL_FLOWS
              value: "{{ .Values.openNMS.api.flowsUrl }}"
            - name: GRPC_URL_FLOWS_TLS_ENABLED
              value: "{{ .Values.openNMS.api.flowsTlsEnabled }}"
            - name: PACKAGED_MINION_FILE
              value: "{{ .Values.openNMS.api.packagedMinionFile }}"
            - name: MINION_ENDPOINT
              value: "{{ .Values.openNMS.api.minionEndpoint }}"
            {{- with .Values.openNMS.api.CorsAllowed }}
            - name: LOKAHI_BFF_CORS_ALLOWED
              value: "{{ . }}"
            {{- end }}
            {{- if .Values.openNMS.api.introspectionEnabled }}
            - name: LOKAHI_BFF_INTROSPECTION_ENABLED
              value: "true"
            {{- else }}
            - name: LOKAHI_BFF_INTROSPECTION_ENABLED
              value: "false"
            {{- end }}
            {{- with .Values.openNMS.api.maxAliasOccurrence }}
            - name: LOKAHI_BFF_MAX_ALIAS_OCCURRENCE
              value: "{{ . }}"
            {{- end }}
            {{- with .Values.openNMS.api.maxComplexity }}
            - name: LOKAHI_BFF_MAX_COMPLEXITY
              value: "{{ . }}"
            {{- end }}
            {{- with .Values.openNMS.api.maxDirectiveOccurrence }}
            - name: LOKAHI_BFF_MAX_DIRECTIVE_OCCURRENCE
              value: "{{ . }}"
            {{- end }}
            {{- with .Values.openNMS.api.maxFieldOccurrence }}
            - name: LOKAHI_BFF_MAX_FIELD_OCCURRENCE
              value: "{{ . }}"
            {{- end }}
            {{- with .Values.openNMS.api.maxQueryDepth }}
            - name: LOKAHI_BFF_MAX_QUERY_DEPTH
              value: "{{ . }}"
            {{- end }}
            # Do not put any env variables below this. The lokahi.development.env include should be last
            # in the 'env' section so variables can be overridden with Helm chart values when needed.
            {{- include "lokahi.deployment.env" (dict "Values" .Values "thisService" .Values.openNMS.api) | nindent 12 }}
          envFrom:
            - configMapRef:
                name: spring-boot-env
          ports:
            - name: grpc
              containerPort: 9090
            - name: http
              containerPort: 8080
          volumeMounts:
            - name: spring-boot-app-config-volume
              mountPath: "/app/config"
          livenessProbe:
            httpGet:
              path: "/actuator/health/liveness"
              port: http
              scheme: HTTP
            initialDelaySeconds: 20
            timeoutSeconds: 1
            periodSeconds: 2
            successThreshold: 1
            failureThreshold: 150
          readinessProbe:
            httpGet:
              path: "/actuator/health/readiness"
              port: http
              scheme: HTTP
            initialDelaySeconds: 20
            timeoutSeconds: 1
            periodSeconds: 2
            successThreshold: 1
            failureThreshold: 250
          resources:
            limits:
              cpu: "{{ .Values.openNMS.api.resources.limits.cpu }}"
              memory: "{{ .Values.openNMS.api.resources.limits.memory }}"
            requests:
              cpu: "{{ .Values.openNMS.api.resources.requests.cpu }}"
              memory: "{{ .Values.openNMS.api.resources.requests.memory }}"
      {{- if .Values.global.privateRepoEnabled }}
      imagePullSecrets:
        - name: image-credentials
      {{- end }}
