{{ if .Values.kafka.Enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.kafka.ServiceName }}
  labels:
    app: kafka
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: {{ .Values.kafka.ServiceName }}
  replicas: {{ .Values.kafka.Replicas }}
  template:
    metadata:
      labels:
        appdomain: opennms
        app: {{ .Values.kafka.ServiceName }}
      annotations:
        kubectl.kubernetes.io/default-container: "{{ .Values.kafka.ServiceName }}"
    spec:
      {{- if .Values.NodeRestrictions.Enabled }}
      nodeSelector:                                                                                    
        {{ .Values.NodeRestrictions.Key }}: {{ .Values.NodeRestrictions.Value }}                       
      tolerations:
        - effect: "NoSchedule"                                                                         
          key: "{{ .Values.NodeRestrictions.Key }}"                                                    
          operator: "Equal"
          value: {{ .Values.NodeRestrictions.Value }} 
      affinity: 
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:                                             
          - weight: 1                                                                                  
            preference:                                                                                
              matchExpressions:                                                                        
              - key: "{{ .Values.NodeRestrictions.Key }}"                                              
                operator: In
                values:                                                                                
                - {{ .Values.NodeRestrictions.Value }}                                                 
      {{- end }}
      containers:
        - name: {{ .Values.kafka.ServiceName }}
          image: {{ .Values.kafka.Image }}
          imagePullPolicy: {{ .Values.global.imagePullPolicy }}
          env:
            - name: BITNAMI_DEBUG
              value: "true"
            - name: KAFKA_ENABLE_KRAFT
              value: "yes"
            - name: KAFKA_CFG_BROKER_ID
              value: "1"
            - name: ALLOW_PLAINTEXT_LISTENER
              value: "yes"
            - name: KAFKA_CFG_PROCESS_ROLES
              value: "broker,controller"
            - name: KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP
              value: "CLIENT:PLAINTEXT,LOCALCLIENT:PLAINTEXT,CONTROLLER:PLAINTEXT"
            - name: KAFKA_CFG_CONTROLLER_LISTENER_NAMES
              value: "CONTROLLER"
            - name: KAFKA_CFG_LISTENERS
              value: "CLIENT://:{{ .Values.kafka.Port }},CONTROLLER://:{{ .Values.kafka.ControllerPort }},LOCALCLIENT://:{{ .Values.kafka.localPort }}"
            - name: KAFKA_ADVERTISED_LISTENERS
              value: "CLIENT://{{ .Values.kafka.ServiceName }}:{{ .Values.kafka.Port }},LOCALCLIENT://localhost:{{ .Values.kafka.localPort }}"
            - name: KAFKA_INTER_BROKER_LISTENER_NAME
              value: "CLIENT"
            - name: KAFKA_CFG_CONTROLLER_QUORUM_VOTERS
              value: "1@localhost:{{ .Values.kafka.ControllerPort }}"
          resources:
            limits:
              cpu: "{{ .Values.kafka.Resources.Limits.Cpu }}"
              memory: "{{ .Values.kafka.Resources.Limits.Memory }}"
            requests:
              cpu: "{{ .Values.kafka.Resources.Requests.Cpu }}"
              memory: "{{ .Values.kafka.Resources.Requests.Memory }}"
          ports:
            - name: client
              containerPort: {{ .Values.kafka.Port }}
            - name: controller
              containerPort: {{ .Values.kafka.ControllerPort }}
            - name: local
              containerPort: {{ .Values.kafka.localPort }}
          livenessProbe:
            failureThreshold: 15
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: client
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 15
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: client
            timeoutSeconds: 5
{{ end }}
