name: release

# This triggers only when pull request is merged (closed) into branches of
# 'release/**'. The process is to create a new release branch from the previous
# release branch, then create a PR from develop branch to that new release.
# When all is approved, then merge and it should trigger this workflow. After
# which, merge new release branch into develop. Then, developers can pull
# develop branch and merge it into the various feature branches. Follows
# gitflow.
on:
  pull_request:
    branches: 
      - 'release/**'
    types: [closed]

# Tmp, just until I get something working. Develop this first, all pieces on
# release, then pull out what needed for other workflows.
#on:  
#  push:
#    branches:
#      - 'develop'

# For now, we have put all steps into a single job, this will allow for just
# one vm to run. We use actions to factor out the functionality. If there is a
# requirement to create additional jobs, maybe to run concurrent jobs, then we
# can split them up later.

jobs:
  release:
    runs-on: ubuntu-latest
    environment: docker-publish-account
    # Enviroment that contains the required secrets.
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
        # Is required to call actions.

      - name: init
        run: |

          # This filters the tag number off of the branch (release/tab_number),
          # puts it as an env variable to be used through out below and passed
          # to actions for tagging the docker images after they are created.          
          echo "branch: " ${{ github.ref }}
          # The above github.ref, we expect this format: release/0.0.1.
          # If that changes, update the following statement.
          TAG=$(echo ${{ github.ref }} | sed -E  's/(.*)\/(.*)/\2/')
          echo "tag: " "$TAG" # Appears
          echo "RELEASE_TAG=$TAG" >> $GITHUB_ENV
          echo "release: " ${{ env.RELEASE_TAG }} # Not appears

          # TODO: Create a git tag for this branch as well.

      - name: feature-ui
        id: action-feature-ui
        uses: ./.github/actions/ui
        with:
          dir-location: 'ui'

      - name: feature-core
        id: action-feature-core
        uses: ./.github/actions/core
        with:
          dir-location: 'platform'

      - name: feature-rest-server
        id: action-rest-server
        uses: ./.github/actions/rest-server
        with:
          dir-location: 'rest-server'

      - name: external-it
        id: action-external-it
        uses: ./.github/actions/external-it
        with:
          dir-location: 'external-it'

      - name: dockerhub-login
        run: |

          # This and the following steps are put here rather than put into an
          # action because it is only ever called from this workflow.

          # Login to dockerhub. The session doesn't seem to carry across steps,
          # re-test to confirm.
          #docker login -u ${{ secrets.DOCKERHUB_LOGIN }} -p ${{ secrets.DOCKERHUB_PASS }}
          echo ${{ secrets.DOCKERHUB_PASS }} | docker login -u ${{ secrets.DOCKERHUB_LOGIN }} --password-stdin

      - name: publish-image-core
        run: |

          # Login to dockerhub.
          echo ${{ secrets.DOCKERHUB_PASS }} | docker login -u ${{ secrets.DOCKERHUB_LOGIN }} --password-stdin

          # Publish core image
          cd platform/

          # Tag and save the image as a file to be published. Both release version and latest.
          docker tag opennms/horizon-stream-core:local opennms/horizon-stream-core:${{ env.RELEASE_TAG }}
          docker tag opennms/horizon-stream-core:local opennms/horizon-stream-core:latest

          docker push opennms/horizon-stream-core:${{ env.RELEASE_TAG }}
          docker push opennms/horizon-stream-core:latest
      
      - name: publish-image-ui
        run: |

          # Login to dockerhub.
          echo ${{ secrets.DOCKERHUB_PASS }} | docker login -u ${{ secrets.DOCKERHUB_LOGIN }} --password-stdin

          # Tag and save the image as a file to be published. Both release version and latest.
          docker tag opennms/horizon-stream-ui:local opennms/horizon-stream-ui:${{ env.RELEASE_TAG }}
          docker tag opennms/horizon-stream-ui:local opennms/horizon-stream-ui:latest

          docker push opennms/horizon-stream-ui:${{ env.RELEASE_TAG }}
          docker push opennms/horizon-stream-ui:latest

      - name: publish-image-rest-server
        run: |

          # Login to dockerhub. Probably could remove this, session created in previous step.
          echo ${{ secrets.DOCKERHUB_PASS }} | docker login -u ${{ secrets.DOCKERHUB_LOGIN }} --password-stdin

          # Test build images
          docker images

          # Tag and save the image as a file to be published. Both release version and latest.
          docker tag opennms/horizon-stream-rest-server:local opennms/horizon-stream-rest-server:${{ env.RELEASE_TAG }}
          docker tag opennms/horizon-stream-rest-server:local opennms/horizon-stream-rest-server:latest

          docker push opennms/horizon-stream-rest-server:${{ env.RELEASE_TAG }}
          docker push opennms/horizon-stream-rest-server:latest

