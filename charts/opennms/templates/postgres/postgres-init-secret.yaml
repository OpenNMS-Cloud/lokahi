apiVersion: v1
kind: Secret # Currently stores passwords!
metadata:
  labels:
    app: {{ .Values.Postgres.ServiceName }}
  name: postgres-initial-sql
  namespace: {{ .Release.Namespace }}
stringData:
  postgres.initial.script.sql: |
    CREATE USER opennms with password '{{ .Values.Postgres.OpenNMSPassword }}';
    CREATE DATABASE horizon_stream;
    GRANT ALL ON DATABASE horizon_stream TO opennms;
  postgres.keycloak.initial.script.sql: |
    CREATE USER keycloak with password '{{ .Values.Postgres.KeycloakPassword }}';
    CREATE DATABASE keycloak;
    GRANT ALL ON DATABASE keycloak TO keycloak;
  postgres.inventory.initial.script.sql: |
    CREATE USER inventory with password '{{ .Values.Postgres.InventoryPassword }}';
    CREATE DATABASE inventory;
    GRANT ALL ON DATABASE inventory TO inventory;
  postgres.alert.initial.script.sql: |
    CREATE USER alert with password '{{ .Values.Postgres.AlertPassword }}';
    CREATE DATABASE alert;
    GRANT ALL ON DATABASE alert TO alert;
    \connect alert;
    CREATE SCHEMA test AUTHORIZATION alert;
  postgres.notification.initial.script.sql: |
    CREATE USER notification with password '{{ .Values.Postgres.NotificationPassword }}';
    CREATE DATABASE notification;
    GRANT ALL ON DATABASE notification TO notification;
  postgres.grafana.initial.script.sql: |
    CREATE USER grafana with password '{{ .Values.Postgres.GrafanaPassword }}';
    CREATE DATABASE grafana;
    GRANT ALL ON DATABASE grafana TO grafana;
  postgres.events.initial.script.sql: |
    CREATE USER events with password '{{ .Values.Postgres.EventsPassword }}';
    CREATE DATABASE events;
    GRANT ALL ON DATABASE events TO events;
  postgres.datachoices.initial.script.sql: |
    CREATE USER datachoices with password '{{ .Values.Postgres.DataChoicesPassword }}';
    CREATE DATABASE datachoices;
    GRANT ALL ON DATABASE datachoices TO datachoices;
  postgres.minion_gateway.initial.script.sql: |
    CREATE USER minion_gateway with password '{{ .Values.Postgres.MinionGatewayPassword }}';
    CREATE DATABASE minion_gateway;
    GRANT ALL ON DATABASE minion_gateway TO minion_gateway;
type: Opaque
