/*******************************************************************************
 * This file is part of OpenNMS(R).
 *
 * Copyright (C) 2022 The OpenNMS Group, Inc.
 * OpenNMS(R) is Copyright (C) 1999-2022 The OpenNMS Group, Inc.
 *
 * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.
 *
 * OpenNMS(R) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * OpenNMS(R) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with OpenNMS(R).  If not, see:
 *      http://www.gnu.org/licenses/
 *
 * For more information contact:
 *     OpenNMS(R) Licensing <license@opennms.org>
 *     http://www.opennms.org/
 *     http://www.opennms.com/
 *******************************************************************************/
syntax = "proto3";

import "google/protobuf/any.proto";

package opennms.events;
option java_multiple_files = true;
option java_package = "org.opennms.horizon.events.proto";


message EventLog {
  repeated Event event = 1;
}

message Event {
  string uei = 1;
  uint64 node_id = 2;
  string location = 3;
  string ip_address = 4;
  uint64 produced_time = 5;
  repeated EventParameter event_params = 6;
  optional EventInfo event_info = 7;
  optional EventSeverity event_severity = 8;
  optional AlarmData alarm_data = 9;
}

message EventInfo {
  optional SnmpInfo snmp = 1;
  // Any other optional event info.
}

message SnmpInfo {
  string id = 1;
  string version = 2;
  uint32 specific = 3;
  uint32 generic = 4;
  string community = 5;
  string trap_oid = 6;
}

message EventParameter {
  string name = 1;
  string value = 2;
  string type = 3;
  string encoding = 4;
}

enum EventSeverity {
  UNDEFINED = 0;
  INDETERMINATE = 1;
  CLEARED = 2;
  NORMAL = 3;
  WARNING = 4;
  MINOR = 5;
  MAJOR = 6;
  CRITICAL = 7;
}

message AlarmData {
  string reduction_key = 1;
  uint32 alarm_type = 2;
  optional string clear_key = 3;
  optional bool auto_clean = 4;
  repeated UpdateField update_field = 5;
  optional ManagedObject managed_object = 6;
}

message UpdateField {
  string field_name = 1;
  bool update_on_reduction = 2;
}

message ManagedObject {
  string type = 1;
}
