<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.3.0"
           xsi:schemaLocation="
		http://www.osgi.org/xmlns/blueprint/v1.0.0
		http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
		http://camel.apache.org/schema/blueprint
		http://camel.apache.org/schema/blueprint/camel-blueprint-3.15.0.xsd">

    <!-- service import -->
    <reference id="eventConfDao" interface="org.opennms.horizon.events.api.EventConfDao" />
    <reference id="sessionUtils" interface="org.opennms.horizon.db.dao.api.SessionUtils" />
    <reference id="eventDao" interface="org.opennms.horizon.db.dao.api.EventDao" />
    <reference id="nodeDao" interface="org.opennms.horizon.db.dao.api.NodeDao" />
    <reference id="ipInterfaceDao" interface="org.opennms.horizon.db.dao.api.IpInterfaceDao" />
    <reference id="distPollerDao" interface="org.opennms.horizon.db.dao.api.DistPollerDao" />
    <reference id="monitoringSystemDao" interface="org.opennms.horizon.db.dao.api.MonitoringSystemDao" />

    <bean id="metricRegistry" class="com.codahale.metrics.MetricRegistry" />

    <bean id="eventUtil" class="org.opennms.netmgt.eventd.EventUtilDaoImpl">
        <argument ref="metricRegistry"/>
        <argument ref="sessionUtils"/>
        <argument ref="nodeDao"/>
        <argument ref="ipInterfaceDao"/>
    </bean>

    <bean id="eventWriter" class="org.opennms.netmgt.eventd.processor.HibernateEventWriter">
        <argument ref="metricRegistry"/>
        <argument ref="eventUtil"/>
        <argument ref="sessionUtils"/>
        <argument ref="eventDao"/>
        <argument ref="nodeDao"/>
        <argument ref="distPollerDao"/>
        <argument ref="monitoringSystemDao"/>
    </bean>

    <bean id="eventExpander" class="org.opennms.netmgt.eventd.EventExpander">
        <argument ref="metricRegistry"/>
        <argument ref="eventConfDao"/>
        <argument ref="eventUtil"/>
    </bean>

    <bean id="eventdConfigManager" class="org.opennms.netmgt.eventd.MockEventdConfig"/>
    <bean id="shouldLogEventSummaries" factory-ref="eventdConfigManager" factory-method="shouldLogEventSummaries"/>
    <bean id="eventdEventHandler" class="org.opennms.netmgt.eventd.DefaultEventHandlerImpl">
        <argument ref="metricRegistry"/>
        <property name="eventProcessors">
            <list>
                <!--
                  This EventProcessor can be used to perform regex replacements on incoming parm values.
                  It was added in 1.11 and because of performance concerns, it is commented-out for now.
                -->
                <!-- <ref bean="eventParmRegexFilter"/> -->
                <ref component-id="eventExpander"/>
                <ref component-id="eventWriter"/> <!--HibernateEventWriter -->
                <ref component-id="eventIpcBroadcastProcessor"/>
            </list>
        </property>
        <property name="logEventSummaries" ref="shouldLogEventSummaries" />
    </bean>

    <bean id="eventIpcManagerHandlerPoolSize" factory-ref="eventdConfigManager" factory-method="getReceivers"/>
    <bean id="eventIpcManagerHandlerQueueLength" factory-ref="eventdConfigManager" factory-method="getQueueLength"/>
    <bean id="eventIpcManagerImpl" class="org.opennms.netmgt.eventd.EventIpcManagerDefaultImpl" init-method="init">
        <argument ref="metricRegistry"/>
        <property name="handlerPoolSize" ref="eventIpcManagerHandlerPoolSize"/>
        <property name="handlerQueueLength" ref="eventIpcManagerHandlerQueueLength"/>
        <property name="eventHandler" ref="eventdEventHandler"/>
    </bean>
    <service interface="org.opennms.horizon.events.api.EventProxy" ref="eventIpcManagerImpl" />
    <service interface="org.opennms.horizon.events.api.EventSubscriptionService" ref="eventIpcManagerImpl" />
    <service interface="org.opennms.horizon.events.api.EventForwarder" ref="eventIpcManagerImpl" />

    <bean id="eventIpcBroadcastProcessor" class="org.opennms.netmgt.eventd.processor.EventIpcBroadcastProcessor">
        <argument ref="metricRegistry"/>
        <property name="eventIpcBroadcaster" ref="eventIpcManagerImpl"/>
    </bean>

    <bean id="annotationBasedEventListenerFactory" class="org.opennms.netmgt.eventd.AnnotationBasedEventListenerFactoryImpl">
        <argument ref="eventIpcManagerImpl"/>
    </bean>
    <service interface="org.opennms.horizon.events.api.AnnotationBasedEventListenerFactory" ref="annotationBasedEventListenerFactory" />

    <cm:property-placeholder id="eventProducerProperties" persistent-id="org.opennms.horizon.eventd.camel" update-strategy="reload">
        <cm:default-properties>
            <cm:property name="useKafka" value="true"/>
            <cm:property name="kafkaBrokers" value="localhost:9092"/>
            <cm:property name="kafkaTopic" value="events"/>

            <cm:property name="useActiveMq" value="false"/>
            <cm:property name="activeMqBrokerURL" value="tcp://localhost:61616"/>
            <cm:property name="activeMqQueueName" value="events"/>
        </cm:default-properties>
    </cm:property-placeholder>

    <!-- Work around Camel using the wrong ActiveMQ component -->
    <bean id="customamq" class="org.apache.camel.component.activemq.ActiveMQComponent">
        <property name="brokerURL" value="${activeMqBrokerURL}"/>
        <property name="usePooledConnection" value="false"/>
    </bean>

    <camelContext autoStartup="true" id="eventForwarderCamelContext" xmlns="http://camel.apache.org/schema/blueprint" allowUseOriginalMessage="false">
        <propertyPlaceholder id="properties" location="blueprint:eventProducerProperties" />

        <route id="produceEventKafka" autoStartup="{{useKafka}}">
            <from uri="direct:forwardEvent"/>
            <marshal><jaxb contextPath="org.opennms.horizon.events.xml"/></marshal>
            <to uri="kafka:{{kafkaTopic}}?brokers={{kafkaBrokers}}" />
        </route>

        <route id="produceEventActiveMq" autoStartup="{{useActiveMq}}">
            <from uri="direct:forwardEvent"/>
            <marshal><jaxb contextPath="org.opennms.horizon.events.xml"/></marshal>
            <to uri="customamq:{{activeMqQueueName}}" />
        </route>
    </camelContext>

</blueprint>
