apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.openNMS.metricsProcessor.serviceName }}
  labels:
    app: {{ .Values.openNMS.metricsProcessor.serviceName }}
  namespace: {{ .Release.Namespace }}
spec:
  replicas: {{ .Values.openNMS.metricsProcessor.replicas }}
  selector:
    matchLabels:
      run: {{ .Values.openNMS.metricsProcessor.serviceName }}
  template:
    metadata:
      labels:
        appdomain: opennms
        run: {{ .Values.openNMS.metricsProcessor.serviceName }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/actuator/prometheus"
        # roll the deployment when the Spring boot environment variable configmap changes
        checksum/spring-boot-env-configmap: {{ include (print $.Template.BasePath "/opennms/spring-boot-env-configmap.yaml") . | sha256sum }}
        kubectl.kubernetes.io/default-container: "{{ .Values.openNMS.metricsProcessor.serviceName }}"
    spec:
      {{- if .Values.nodeRestrictions.enabled }}
      nodeSelector:                                                                                    
        {{ .Values.nodeRestrictions.key }}: {{ .Values.nodeRestrictions.value }}                       
      tolerations:
        - effect: "NoSchedule"                                                                         
          key: "{{ .Values.nodeRestrictions.key }}"                                                    
          operator: "Equal"
          value: {{ .Values.nodeRestrictions.value }} 
      affinity: 
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:                                             
          - weight: 1                                                                                  
            preference:                                                                                
              matchExpressions:                                                                        
              - key: "{{ .Values.nodeRestrictions.key }}"                                              
                operator: In
                values:                                                                                
                - {{ .Values.nodeRestrictions.value }}                                                 
      {{- end }}
      volumes:
        - name: spring-boot-app-config-volume
          configMap:
            name: spring-boot-app-config
      containers:
        - name: {{ .Values.openNMS.metricsProcessor.serviceName }}
          image: {{ include "lokahi.image" (dict "Values" .Values "thisService" .Values.openNMS.metricsProcessor) | quote }}
          imagePullPolicy: {{ .Values.global.imagePullPolicy }}
          env:
            - name: JAVA_TOOL_OPTIONS
              value: "-XX:MaxRAMPercentage=50 -javaagent:agent/opentelemetry-javaagent.jar -agentlib:jdwp=transport=dt_socket,server=y,address=5005,suspend=n,quiet=y"  # FIXME: Permanent debug port, enable only for dev mode
            - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
              value: "{{ .Values.global.kafkaClient.bootstrapServers }}"
            - name: GRPC_FLOW_INGESTOR_URL
              value: "{{ .Values.openNMS.metricsProcessor.flowIngestorUrl }}"
            - name: GRPC_FLOW_TLS_ENABLED
              value: "{{ .Values.openNMS.metricsProcessor.flowTlsEnabled }}"
            - name: CORTEX_WRITE_URL
              value: {{ .Values.cortexClient.protocol }}://{{ .Values.cortexClient.hostWrite }}:{{ .Values.cortexClient.portWrite }}{{ .Values.cortexClient.pathWrite }}
            # Do not put any env variables below this. The lokahi.development.env include should be last
            # in the 'env' section so variables can be overridden with Helm chart values when needed.
            {{- include "lokahi.deployment.env" (dict "Values" .Values "thisService" .Values.openNMS.metricsProcessor) | nindent 12 }}
          envFrom:
          - configMapRef:
              name: spring-boot-env
          {{- include "lokahi.kafkaSecretFrom" .Values.openNMS.metricsProcessor | indent 10 }}
          ports:
            - name: http
              containerPort: 8080
          volumeMounts:
            - name: spring-boot-app-config-volume
              mountPath: "/app/config"
          livenessProbe:
            httpGet:
              path: "/actuator/health/liveness"
              port: http
              scheme: HTTP
            initialDelaySeconds: 20
            timeoutSeconds: 1
            periodSeconds: 2
            successThreshold: 1
            failureThreshold: 150
          readinessProbe:
            httpGet:
              path: "/actuator/health/readiness"
              port: http
              scheme: HTTP
            initialDelaySeconds: 20
            timeoutSeconds: 1
            periodSeconds: 2
            successThreshold: 1
            failureThreshold: 250
          resources:
            limits:
              cpu: "{{ .Values.openNMS.metricsProcessor.resources.limits.cpu }}"
              memory: "{{ .Values.openNMS.metricsProcessor.resources.limits.memory }}"
            requests:
              cpu: "{{ .Values.openNMS.metricsProcessor.resources.requests.cpu }}"
              memory: "{{ .Values.openNMS.metricsProcessor.resources.requests.memory }}"
      {{- if .Values.global.privateRepoEnabled }}
      imagePullSecrets:
        - name: image-credentials
      {{- end }}
