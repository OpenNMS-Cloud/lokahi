kind: Service
apiVersion: v1
metadata:
  name: onmshs
  namespace: local-instance
spec:
  selector:
    app: onmshs
  ports:
  - protocol: TCP
    port: 443
    targetPort: 443
    name: onmshs
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: onmshs
  namespace: local-instance
  labels:
    app: onmshs
spec:
  selector:
    matchLabels:
      app: onmshs
  replicas: 1
  template:
    metadata:
      labels:
        app: onmshs
    spec:
      containers:
        - name: onmshs
          image: nginx:alpine
          ports:
          - containerPort: 443
          volumeMounts:
            - name: nginx-config
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
            - name: ssl-config
              mountPath: /etc/nginx/tls.key
              subPath: tls.key
            - name: ssl-config
              mountPath: /etc/nginx/tls.crt
              subPath: tls.crt
      volumes:
        - name: nginx-config
          configMap:
            name: confnginx
        - name: ssl-config
          secret:
            secretName: test-nginx-custom-tls
            defaultMode: 420
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: confnginx
  namespace: local-instance
  # $ openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout nginx-custom.key -out nginx-custom.crt -subj "/CN=nginx-custom/O=nginx-custom"
  # $ kubectl -n local-instance create secret tls test-nginx-custom-tls --key="nginx-custom.key" --cert="nginx-custom.crt"
  # Update the opennms-ingress for root on onmshs to the following:
  #          - path: /
  #          pathType: Prefix
  #          backend:
  #            service:
  #              name: nginx-custom
  #              port:
  #                number: 443
data:
  nginx.conf: |
    user  nginx;
    worker_processes  1;
    error_log  /var/log/nginx/error.log warn;
    pid        /var/run/nginx.pid;
    events {
        worker_connections  1024;
    }
    http {
      include       /etc/nginx/mime.types;
      default_type  application/octet-stream;
      log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';
      access_log  /var/log/nginx/access.log  main;
      sendfile        on;
      keepalive_timeout  65;
      server {
        listen 80;
        listen 443 ssl;

        server_name         nginx-custom;
        ssl_certificate     /etc/nginx/tls.crt;
        ssl_certificate_key /etc/nginx/tls.key;
        #ssl-ciphers:        "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA256:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA"
        #ssl-protocols:      "TLSv1 TLSv1.1 TLSv1.2 TLSv1.3"

        server_name ~^(?<subdomain>.*?)\.;
        resolver kube-dns.kube-system.svc.cluster.local valid=5s;

        location /healthz {
          return 200;
        }

        location / {
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection "Upgrade";
          #proxy_pass http://onms-keycloak:8080/;
          proxy_pass https://google.com/;
          proxy_set_header Host $host;
          proxy_http_version 1.1;
        }
      }
    }
