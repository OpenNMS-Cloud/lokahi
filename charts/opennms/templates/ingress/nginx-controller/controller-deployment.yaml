apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: controller-{{ .Values.Namespace }}
    app.kubernetes.io/name: ingress-nginx-{{ .Values.Namespace }}
    app.kubernetes.io/instance: ingress-nginx-{{ .Values.Namespace }}
    app.kubernetes.io/part-of: ingress-nginx-{{ .Values.Namespace }}
    app.kubernetes.io/version: 1.3.0
  name: ingress-nginx-controller
  namespace: {{ .Values.Namespace }}
spec:
  minReadySeconds: 0
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/component: controller-{{ .Values.Namespace }}
      app.kubernetes.io/name: ingress-nginx-{{ .Values.Namespace }}
      app.kubernetes.io/instance: ingress-nginx-{{ .Values.Namespace }}
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/component: controller-{{ .Values.Namespace }}
        app.kubernetes.io/name: ingress-nginx-{{ .Values.Namespace }}
        app.kubernetes.io/instance: ingress-nginx-{{ .Values.Namespace }}
    spec:
      {{ if .Values.NodeRestrictions.Enabled }}
      tolerations:
        - effect: "NoSchedule"
          key: "{{ .Values.NodeRestrictions.Key }}"
          operator: "Equal"
          value: {{ .Values.NodeRestrictions.Value }}
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            preference:
              matchExpressions:
              - key: "{{ .Values.NodeRestrictions.Key }}"
                operator: In
                values:
                - {{ .Values.NodeRestrictions.Value }}
      {{ end }}
      dnsPolicy: ClusterFirst
      containers:
      - args:
        - /nginx-ingress-controller
        - --election-id=ingress-controller-leader
        - --controller-class=k8s.io/ingress-nginx
        - --ingress-class=nginx
        - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
        - --watch-ingress-without-class=true
        - --publish-status-address=localhost
        - --http-port={{ .Values.Ingress.NginxController.HttpPort }}
        - --https-port={{ .Values.Ingress.NginxController.HttpsPort }}
        - --validating-webhook=:8443
        - --validating-webhook-certificate=/usr/local/certificates/cert
        - --validating-webhook-key=/usr/local/certificates/key
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: LD_PRELOAD
          value: /usr/local/lib/libmimalloc.so
        image: registry.k8s.io/ingress-nginx/controller:v1.3.0@sha256:d1707ca76d3b044ab8a28277a2466a02100ee9f58a86af1535a3edf9323ea1b5
        imagePullPolicy: IfNotPresent
        lifecycle:
          preStop:
            exec:
              command:
              - /wait-shutdown
        livenessProbe:
          failureThreshold: 5
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: controller
        ports:
        - containerPort: {{ .Values.Ingress.NginxController.HttpPort }}
          hostPort: {{ .Values.Ingress.NginxController.HttpPort }}
          name: http
          protocol: TCP
        - containerPort: {{ .Values.Ingress.NginxController.HttpsPort }}
          hostPort: {{ .Values.Ingress.NginxController.HttpsPort }}
          name: https
          protocol: TCP
        - containerPort: 8443
          name: webhook
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          requests:
            cpu: 100m
            memory: 90Mi
        securityContext:
          allowPrivilegeEscalation: true
          capabilities:
            add:
            - NET_BIND_SERVICE
            drop:
            - ALL
          runAsUser: 101
        volumeMounts:
        - mountPath: /usr/local/certificates/
          name: webhook-cert
          readOnly: true
      serviceAccountName: ingress-nginx
      terminationGracePeriodSeconds: 0
      volumes:
      - name: webhook-cert
        secret:
          secretName: ingress-nginx-admission
