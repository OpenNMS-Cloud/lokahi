{{- if .Values.Citus.Enabled }}
apiVersion: v1
kind: Secret # Currently stores passwords!
metadata:
  labels:
    app: {{ .Values.Citus.ServiceName }}
  name: citus-initial-sql
  namespace: {{ .Release.Namespace }}
stringData:
  postgres.initial.script.sql: |

    CREATE USER grafana with password '{{ .Values.Citus.GrafanaPassword }}';
    CREATE DATABASE grafana;
    GRANT ALL ON DATABASE grafana TO grafana;
    \connect grafana
    GRANT ALL ON SCHEMA public TO grafana;

    \connect desenv
    CREATE USER opennms with password '{{ .Values.Citus.OpenNMSPassword }}';
    GRANT ALL ON DATABASE desenv TO opennms;

    \connect desenv;

    CREATE USER keycloak with password '{{ .Values.Citus.KeycloakPassword }}';
    CREATE SCHEMA IF NOT EXISTS keycloak AUTHORIZATION keycloak;

    CREATE USER inventory with password '{{ .Values.Citus.InventoryPassword }}';
    CREATE SCHEMA IF NOT EXISTS inventory AUTHORIZATION inventory;

    CREATE USER alert with password '{{ .Values.Citus.AlertPassword }}';
    CREATE SCHEMA IF NOT EXISTS alert AUTHORIZATION alert;

    CREATE USER notification with password '{{ .Values.Citus.NotificationPassword }}';
    CREATE SCHEMA IF NOT EXISTS notification AUTHORIZATION notification;

    CREATE USER events with password '{{ .Values.Citus.EventsPassword }}';
    CREATE SCHEMA IF NOT EXISTS events AUTHORIZATION events;

    CREATE USER datachoices with password '{{ .Values.Citus.DataChoicesPassword }}';
    CREATE SCHEMA IF NOT EXISTS datachoices AUTHORIZATION datachoices;

    CREATE USER minion_gateway with password '{{ .Values.Citus.MinionGatewayPassword }}';
    CREATE SCHEMA IF NOT EXISTS minion_gateway AUTHORIZATION minion_gateway;

type: Opaque
{{- end }}
