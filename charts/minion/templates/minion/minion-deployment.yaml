{{- if .Values.OpenNMS.Minion.Enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.OpenNMS.Minion.ServiceName }}
  labels:
    app: {{ .Values.OpenNMS.Minion.ServiceName }}
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: {{ .Values.OpenNMS.Minion.ServiceName }}
  replicas: {{ .Values.OpenNMS.Minion.Replicas }}
  template:
    metadata:
      labels:
        appdomain: opennms
        app: {{ .Values.OpenNMS.Minion.ServiceName }}
      annotations:
        linkerd.io/inject: enabled
        kubectl.kubernetes.io/default-container: "{{ .Values.OpenNMS.Minion.ServiceName }}"
    spec:
      serviceAccountName: {{ .Values.OpenNMS.Minion.ServiceName }}-sa
      {{- if .Values.NodeRestrictions.Enabled }}
      nodeSelector:                                                                                    
        {{ .Values.NodeRestrictions.Key }}: {{ .Values.NodeRestrictions.Value }}                       
      tolerations:
        - effect: "NoSchedule"                                                                         
          key: "{{ .Values.NodeRestrictions.Key }}"                                                    
          operator: "Equal"
          value: {{ .Values.NodeRestrictions.Value }} 
      affinity: 
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:                                             
          - weight: 1                                                                                  
            preference:                                                                                
              matchExpressions:                                                                        
              - key: "{{ .Values.NodeRestrictions.Key }}"                                              
                operator: In
                values:                                                                                
                - {{ .Values.NodeRestrictions.Value }}                                                 
      {{- end }}
      volumes:
        - name: minion-config-volume
          configMap:
            name: minion-config
        - name: maven-volume
          emptyDir: {}
        {{- if .Values.OpenNMS.Minion.addDefaultLocation }}
        - name: scripts
          configMap:
            name: minion-scripts
        - name: certificate-secrets
          secret:
            secretName: root-ca-certificate
        - name: minion-certificate-manager-secrets
          secret:
            secretName: client-root-ca-certificate
        - name: certificate
          emptyDir: {}
        {{- end }}
        {{- if .Values.OpenNMS.Minion.ExtraVolumes }}
          {{ toYaml .Values.OpenNMS.Minion.ExtraVolumes | nindent 8 }}
        {{- end }}
      initContainers:
        {{ if not .Values.OpenShift }}
        - name: init-sysctl
          image: busybox
          command:
            - sysctl
            - -w
            - net.ipv4.ping_group_range=0 429496729
          securityContext:
            privileged: true
        {{ end }}
        {{- if .Values.OpenNMS.Minion.addDefaultLocation }}
        # This container is a development time helper which generates client certificate, key and signs it with
        # `Client CA` certificate which is running in cluster. It's a bit hacky, since it pulls CA private key
        # into minion. Please do not use this in production.
        # Remarks - working directory for this container is /cert which is emptyDir. This empty dir is later mounted
        # into minion container itself under /opt/karaf/certs/.
        - image: {{ include "lokahi.image" (dict "Values" .Values "thisService" .Values.OpenNMS.Minion) | quote }}
          imagePullPolicy: {{ .Values.global.imagePullPolicy }}
          name: get-cert
          command:
            - bash
            - /scripts/init-create-test-location.sh
          env:
            - name: INGRESS_HOST_PORT
              value: "{{ .Values.Host }}:{{ .Values.Port }}"
          securityContext:
            privileged: false
            runAsUser: 10001
            runAsGroup: 10001
          volumeMounts:
            - name: certificate
              mountPath: "/cert"
            - name: minion-certificate-manager-secrets
              mountPath: "/run/secrets/mtls"
            - name: scripts
              mountPath: /scripts
        {{- end }}
        {{- if .Values.OpenNMS.Minion.ExtraInitContainers }}
          {{ toYaml .Values.OpenNMS.Minion.ExtraInitContainers | nindent 8 }}
        {{- end }}
      containers:
        - name: {{ .Values.OpenNMS.Minion.ServiceName }}
          image: {{ include "lokahi.image" (dict "Values" .Values "thisService" .Values.OpenNMS.Minion) | quote }}
          imagePullPolicy: {{ .Values.global.imagePullPolicy }}
          env:
            - name: JAVA_TOOL_OPTIONS
              value: "-Djava.net.preferIPv4Stack=true -XX:MaxRAMPercentage=50 -javaagent:agent/opentelemetry-javaagent.jar -agentlib:jdwp=transport=dt_socket,server=y,address=5005,suspend=n,quiet=y" # FIXME: Permanent debug port, enable only for dev mode
            {{- if .Values.OpenNMS.Minion.logLevel }}
            - name: KARAF_OPTS
              value: -Dkaraf.log.console={{ .Values.OpenNMS.Minion.logLevel }}
            {{- end }}
            {{- if .Values.OpenNMS.Minion.addDefaultLocation }}
            - name: GRPC_CLIENT_KEYSTORE_PASSWORD
              value: "changeme"
            - name: MINION_GATEWAY_HOST
              value: "ingress-nginx-controller" # we're inside the cluster, so we need to talk to the internal service name
            - name: GRPC_CLIENT_OVERRIDE_AUTHORITY
              value: "minion.{{ .Values.Host }}" # but the TLS certificate will have the external name, so expect that
            - name: GRPC_CLIENT_TRUSTSTORE
              value: "/run/secrets/certificates/tls.crt"
            {{- end }}
            {{- if .Values.global.openTelemetry.otlpTracesEndpoint }}
            - name: OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
              value: {{ .Values.global.openTelemetry.otlpTracesEndpoint | toYaml }}
            {{- else }}
            - name: OTEL_TRACES_EXPORTER
              value: "none"
            {{- end }}
            - name: OTEL_METRICS_EXPORTER
              value: "none"
            {{- if .Values.global.openTelemetry.env }}
              {{- range $key, $val := .Values.global.openTelemetry.env }}
            - name: {{ $key }}
              value: {{ $val | quote }}
              {{- end }}
            {{- end }}
            # Do not put any env variables below this. The lokahi.development.env include should be last
            # in the 'env' section so variables can be overridden with Helm chart values when needed.
            {{- include "lokahi.deployment.env" (dict "Values" .Values "thisService" .Values.OpenNMS.Minion) | nindent 12 }}
          ports:
            - name: http
              containerPort: {{ .Values.OpenNMS.Minion.Port }}
            - name: snmp-traps
              protocol: UDP
              containerPort: {{ .Values.OpenNMS.Minion.TrapsListenerPort }}
            - name: ssh
              containerPort: {{ .Values.OpenNMS.Minion.SshPort }}
            - name: netflow5
              protocol: UDP
              containerPort: {{ .Values.OpenNMS.Minion.Netflow5ListenerPort }}
            - name: netflow9
              protocol: UDP
              containerPort: {{ .Values.OpenNMS.Minion.Netflow9ListenerPort }}
          volumeMounts:
            - name: maven-volume
              mountPath: /.m2
            {{- if .Values.OpenNMS.Minion.addDefaultLocation }}
            - name: certificate-secrets
              mountPath: "/run/secrets/certificates"
              readOnly: true
            - name: minion-certificate-manager-secrets
              mountPath: "/run/secrets/mtls"
              readOnly: true
            - name: certificate
              subPath: "minion.p12"
              mountPath: "/opt/karaf/minion.p12"
              readOnly: true
            {{- end }}
            {{- if .Values.OpenNMS.Minion.ExtraMounts }}
              {{ toYaml .Values.OpenNMS.Minion.ExtraMounts | nindent 12 }}
            {{- end }}
          resources:
            limits:
              cpu: "{{ .Values.OpenNMS.Minion.Resources.Limits.Cpu }}"
              memory: "{{ .Values.OpenNMS.Minion.Resources.Limits.Memory }}"
            requests:
              cpu: "{{ .Values.OpenNMS.Minion.Resources.Requests.Cpu }}"
              memory: "{{ .Values.OpenNMS.Minion.Resources.Requests.Memory }}"
          startupProbe:
            exec:
              command:
              - sh
              - -c
              - unset JAVA_TOOL_OPTIONS; echo "opennms:task-set-print" | bin/client -b | grep -q taskDefinition
            initialDelaySeconds: 25
            periodSeconds: 5
            failureThreshold: 10
{{- end }}
