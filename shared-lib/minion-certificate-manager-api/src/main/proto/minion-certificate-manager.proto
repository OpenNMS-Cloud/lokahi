/*******************************************************************************
 * This file is part of OpenNMS(R).
 *
 * Copyright (C) 2023 The OpenNMS Group, Inc.
 * OpenNMS(R) is Copyright (C) 1999-2023 The OpenNMS Group, Inc.
 *
 * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.
 *
 * OpenNMS(R) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * OpenNMS(R) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with OpenNMS(R).  If not, see:
 *      http://www.gnu.org/licenses/
 *
 * For more information contact:
 *     OpenNMS(R) Licensing <license@opennms.org>
 *     http://www.opennms.org/
 *     http://www.opennms.com/
 *******************************************************************************/
syntax = "proto3";

package opennms.minioncertmanager;
option java_multiple_files = true;
option java_package = "org.opennms.horizon.minioncertmanager.proto";
option go_package = "github.com/OpenNMS-Cloud/TSaaS/pki/bto/proto";

import "google/protobuf/timestamp.proto";

service MinionCertificateManager {
  rpc getMinionCert(MinionCertificateRequest) returns (GetMinionCertificateResponse) {};
  rpc getMinionCertMetadata(MinionCertificateRequest) returns (GetMinionCertificateMetadataResponse) {};
  rpc revokeMinionCert(MinionCertificateRequest) returns (EmptyResponse) {};
  rpc deleteMinionCert(MinionCertificateRequest) returns (EmptyResponse) {};
  rpc isCertValid(IsCertificateValidRequest) returns (IsCertificateValidResponse) {};
}

message MinionCertificateRequest {
  string tenant_id = 1;
  uint64 location_id = 2;
}

message GetMinionCertificateResponse {
  bytes certificate = 1;
  string password = 2;
}

message EmptyResponse {
}

message GetMinionCertificateMetadataResponse {
  string serial_number = 1; // certificate serial number
  string subject = 2; // should contain the Tenant ID and the Location ID
  google.protobuf.Timestamp create_date = 3; // ~ not_before in Keyfactor to track creation date
  google.protobuf.Timestamp expire_date = 4; // ~ not_after in Keyfactor to track expiration date
}

message IsCertificateValidRequest {
  string serial_number = 1; // certificate serial number
}

message IsCertificateValidResponse {
  bool is_valid = 1; // true when valid; false otherwise
}
