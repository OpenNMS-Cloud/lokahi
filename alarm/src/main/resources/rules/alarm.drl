/*******************************************************************************
 * This file is part of OpenNMS(R).
 *
 * Copyright (C) 2019 The OpenNMS Group, Inc.
 * OpenNMS(R) is Copyright (C) 1999-2019 The OpenNMS Group, Inc.
 *
 * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.
 *
 * OpenNMS(R) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * OpenNMS(R) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with OpenNMS(R).  If not, see:
 *      http://www.gnu.org/licenses/
 *
 * For more information contact:
 *     OpenNMS(R) Licensing <license@opennms.org>
 *     http://www.opennms.org/
 *     http://www.opennms.com/
 *******************************************************************************/

package org.opennms.horizon.alarmservice.drools;

import java.util.Date;
import org.kie.api.time.SessionClock;
import org.opennms.horizon.alarmservice.db.entity.Alarm;
import org.opennms.horizon.alarmservice.model.AlarmSeverity;
import org.opennms.horizon.alarmservice.model.TroubleTicketState;

global org.opennms.horizon.alarmservice.api.AlarmService alarmService;

declare org.opennms.horizon.alarmservice.db.entity.Alarm
    @role(event)
    @timestamp(lastUpdateTime)
end

rule "cosmicClear"
  salience 100
  when
    $sessionClock : SessionClock()
    $clear : Alarm(alarmType == Alarm.RESOLUTION_TYPE)
    $trigger : Alarm(alarmType == Alarm.PROBLEM_TYPE, severity.isGreaterThanOrEqual(AlarmSeverity.NORMAL), reductionKey == $clear.clearKey, lastEventTime <= $clear.lastEventTime)
  then
    alarmService.clearAlarm($trigger, new Date($sessionClock.getCurrentTime()));
end

rule "unclear"
  when
    $sessionClock : SessionClock()
    $trigger : Alarm(alarmType == Alarm.PROBLEM_TYPE,
                         severity == AlarmSeverity.CLEARED,
                         getLastEventSeverity().isGreaterThan(AlarmSeverity.CLEARED),
                         lastEventTime > lastAutomationTime)
  then
    alarmService.unclearAlarm($trigger, new Date($sessionClock.getCurrentTime()));
end

/*
  An example of how the alarm severity can be made to automatically increase over time.
  This rule is purposely commented out and disabled by default.

rule "escalation"
  when
    $sessionClock : SessionClock()
    $alarm : Alarm((alarmType == Alarm.PROBLEM_TYPE || alarmType == Alarm.PROBLEM_WITHOUT_RESOLUTION_TYPE) &&
                         AlarmSeverity.WARNING.isLessThanOrEqual(severity) &&
                         AlarmSeverity.CRITICAL.isGreaterThan(severity) &&
                         serviceType != null &&
                         alarmAckTime == null)
    not( Alarm( this == $alarm ) over window:time( 1h ) )
  then
    alarmService.escalateAlarm($alarm, new Date($sessionClock.getCurrentTime()));
end
*/

rule "cleanUp"
  salience 0
  when
    $sessionClock : SessionClock()
    $alarm : Alarm(severity.isLessThanOrEqual(AlarmSeverity.NORMAL) &&
                       (alarmAckTime == null))
    not( Alarm( this == $alarm ) over window:time( 5m ) )
  then
    alarmService.deleteAlarm($alarm);
end

rule "fullCleanUp"
  salience 0
  when
    $sessionClock : SessionClock()
    $alarm : Alarm(severity.isLessThanOrEqual(AlarmSeverity.NORMAL))
    not( Alarm( this == $alarm ) over window:time( 1d ) )
  then
    alarmService.deleteAlarm($alarm);
end

rule "GC"
  salience 0
  when
    $sessionClock : SessionClock()
    $alarm : Alarm(alarmAckTime == null)
    not( Alarm( this == $alarm ) over window:time( 3d ) )
  then
    alarmService.deleteAlarm($alarm);
end

rule "fullGC"
  salience 0
  when
    $sessionClock : SessionClock()
    $alarm : Alarm()
    not( Alarm( this == $alarm ) over window:time( 8d ) )
  then
    alarmService.deleteAlarm($alarm);
end
