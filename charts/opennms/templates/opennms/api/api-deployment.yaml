apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.OpenNMS.API.ServiceName }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ .Values.OpenNMS.API.ServiceName }}
    app.kubernetes.io/name: {{ .Values.OpenNMS.API.ServiceName }}
  annotations:
    autoupdate: "true"
spec:
  replicas: {{ .Values.OpenNMS.API.Replicas }}
  selector:
    matchLabels:
      app: {{ .Values.OpenNMS.API.ServiceName }}
  template:
    metadata:
      labels:
        appdomain: opennms
        app: {{ .Values.OpenNMS.API.ServiceName }}
    spec:
      {{ if .Values.NodeRestrictions.Enabled }}
      nodeSelector:
        {{ .Values.NodeRestrictions.Key }}: {{ .Values.NodeRestrictions.Value }}
      tolerations:
        - effect: "NoSchedule"
          key: "{{ .Values.NodeRestrictions.Key }}"
          operator: "Equal"
          value: {{ .Values.NodeRestrictions.Value }}
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              preference:
                matchExpressions:
                  - key: "{{ .Values.NodeRestrictions.Key }}"
                    operator: In
                    values:
                      - {{ .Values.NodeRestrictions.Value }}
      {{ end }}
      terminationGracePeriodSeconds: 120
      containers:
        - name: {{ .Values.OpenNMS.API.ServiceName }}
          image: {{ .Values.OpenNMS.API.Image }}
          imagePullPolicy: {{ .Values.OpenNMS.API.ImagePullPolicy }}
          env:
            - name: JAVA_TOOL_OPTIONS
              value: "-agentlib:jdwp=transport=dt_socket,server=y,address=5005,suspend=n,quiet=y"  # FIXME: Permanent debug port, enable only for dev mode
            - name: SPRING_CACHE_CAFFEINE_SPEC
              value: "maximumSize=10000,expireAfterWrite=60s"
            - name: TSDB_URL
              value: "http://{{ .Values.Cortex.ServiceName }}:{{ .Values.Cortex.Port }}/prometheus/api/v1/query"
            - name: SPRING_WEBFLUX_BASE_PATH
              value: /api
            - name: GRAPHQL_SPQR_GUI_TARGET_ENDPOINT
              value: /api/graphql
            - name: GRPC_URL_INVENTORY
              value: "{{ .Values.OpenNMS.Inventory.ServiceName }}:{{ .Values.OpenNMS.Inventory.GrpcPort }}"
            - name: GRPC_URL_EVENTS
              value: "{{ .Values.OpenNMS.Events.ServiceName }}:{{ .Values.OpenNMS.Events.GrpcPort }}"
            - name: GRPC_URL_NOTIFICATION
              value: "{{ .Values.OpenNMS.Notification.ServiceName }}:{{ .Values.OpenNMS.Notification.GrpcPort }}"
            - name: GRPC_URL_ALERTS
              value: "{{ .Values.OpenNMS.Alert.ServiceName }}:{{ .Values.OpenNMS.Alert.GrpcPort }}"
          ports:
            - containerPort: {{ .Values.OpenNMS.API.Port }}
          {{/*  TODO    livenessProbe:*/}}
          {{/*          readinessProbe:*/}}
          {{/*          startupProbe:*/}}
          resources:
            limits:
              cpu: "{{ .Values.OpenNMS.API.Resources.Limits.Cpu }}"
              memory: "{{ .Values.OpenNMS.API.Resources.Limits.Memory }}"
            requests:
              cpu: "{{ .Values.OpenNMS.API.Resources.Requests.Cpu }}"
              memory: "{{ .Values.OpenNMS.API.Resources.Requests.Memory }}"
