{{- if .Values.Grafana.Enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: {{ .Values.Grafana.ServiceName }}
  name: {{ .Values.Grafana.ServiceName }}
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: {{ .Values.Grafana.ServiceName }}
  template:
    metadata:
      labels:
        appdomain: opennms
        app: {{ .Values.Grafana.ServiceName }}
      annotations:
        kubectl.kubernetes.io/default-container: "{{ .Values.Grafana.ServiceName }}"
        # https://helm.sh/docs/howto/charts_tips_and_tricks/#automatically-roll-deployments
        checksum/secret: "{{ include (print $.Template.BasePath "/grafana/grafana-secret.yaml") . | sha256sum }}"
        checksum/dashboards: "{{ (.Files.Glob "dashboards/*.json").AsConfig |  sha256sum }}"
    spec:
      {{- if .Values.NodeRestrictions.Enabled }}
      nodeSelector:                                                                                    
        {{ .Values.NodeRestrictions.Key }}: {{ .Values.NodeRestrictions.Value }}
      tolerations:
        - effect: "NoSchedule"
          key: "{{ .Values.NodeRestrictions.Key }}"
          operator: "Equal"
          value: {{ .Values.NodeRestrictions.Value }}
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            preference:
              matchExpressions:
              - key: "{{ .Values.NodeRestrictions.Key }}"
                operator: In
                values:
                - {{ .Values.NodeRestrictions.Value }}
      {{- end }}
      volumes:
        - name: grafana-config
          secret:
            secretName: {{ .Values.Grafana.ServiceName }}
            defaultMode: 420
        - name: {{ $.Values.Grafana.ServiceName }}-dashboards
          configMap:
            name: {{ $.Values.Grafana.ServiceName }}-dashboards
      {{- if .Values.Citus.Enabled }}
      initContainers:
        - name: wait-for-db
          image: postgres:16-alpine
          args:
          - /bin/sh
          - -c
          - | 
            set -x;
            while ! psql -U {{ .Values.Citus.AdminUser }} -h postgres -c 'select 1'; do
              echo "Waiting for DB to be available"
              sleep 10
            done
            echo "Database is available"
      {{- end }}
      containers:
        - name: {{ .Values.Grafana.ServiceName }}
          image: {{ include "lokahi.image" (dict "Values" .Values "thisService" .Values.Grafana) | quote }}
          imagePullPolicy: {{ .Values.Grafana.ImagePullPolicy }}
          ports:
            - containerPort: {{ .Values.Grafana.Port }}
          volumeMounts:
            - name: grafana-config
              mountPath: "/etc/grafana/provisioning/datasources/default.yml"
              subPath: "default.yml"
            - name: grafana-config
              mountPath: "/etc/grafana/grafana.ini"
              subPath: "grafana.ini"
            - name: grafana-config
              mountPath: "/etc/grafana/provisioning/dashboards/dashboard.yml"
              subPath: "dashboard.yml"
            - name: grafana-config
              mountPath: "/usr/share/grafana/public/dashboards/opennms-entities.json"
              subPath: "opennms-entities.json"
            {{- if .Values.Prometheus.Enabled }}
            - name: grafana-config
              mountPath: "/usr/share/grafana/public/dashboards/opennms-tenant-metrics.json"
              subPath: "opennms-tenant-metrics.json"
            {{- end }}
            {{- range $path, $_ := .Files.Glob "dashboards/*.json" }}
            - name: {{ $.Values.Grafana.ServiceName }}-dashboards
              mountPath: "/usr/share/grafana/public/dashboards/{{ $path | base }}"
              subPath: "{{ $path | base }}"
            {{- end }}
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /robots.txt
              port: {{ .Values.Grafana.Port }}
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 30
          livenessProbe:
            initialDelaySeconds: 30
            periodSeconds: 10
            tcpSocket:
              port: {{ .Values.Grafana.Port }}
          resources:
            limits:
              cpu: "{{ .Values.Grafana.Resources.Limits.Cpu }}"
              memory: "{{ .Values.Grafana.Resources.Limits.Memory }}"
            requests:
              cpu: "{{ .Values.Grafana.Resources.Requests.Cpu }}"
              memory: "{{ .Values.Grafana.Resources.Requests.Memory }}"
{{- end }}
