/*******************************************************************************
 * This file is part of OpenNMS(R).
 *
 * Copyright (C) 2009-2017 The OpenNMS Group, Inc.
 * OpenNMS(R) is Copyright (C) 1999-2017 The OpenNMS Group, Inc.
 *
 * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.
 *
 * OpenNMS(R) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * OpenNMS(R) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with OpenNMS(R).  If not, see:
 *      http://www.gnu.org/licenses/
 *
 * For more information contact:
 *     OpenNMS(R) Licensing <license@opennms.org>
 *     http://www.opennms.org/
 *     http://www.opennms.com/
 *******************************************************************************/

//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.0.3-b01-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2009.01.29 at 01:15:48 PM EST 
//


package org.opennms.netmgt.provision.persistence.dto;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import lombok.Data;

@Data
public class CategoriesAndMetadataDTO {


    protected Map<String, RequisitionCategoryDTO> categories = new HashMap<>();
    protected Map<String, RequisitionMetaDataDTO> metaData = new HashMap<>();

    /**
     * <p>getCategory</p>
     *
     * @param category a {@link String} object.
     * @return a {@link RequisitionCategoryDTO} object.
     */
    public RequisitionCategoryDTO getCategory(String category) {
        return categories.get(category);
    }

    /**
     * <p>getCategoryCount</p>
     *
     * @return a int.
     */
    public int getCategoryCount() {
        return (categories == null)? 0 : categories.size();
    }

    public List<RequisitionMetaDataDTO> getMetadataAsList() {
        return metaData.entrySet().stream().map(e -> e.getValue()).collect(Collectors.toList());
    }

    public List<RequisitionCategoryDTO> getCategoriesAsList() {
        return categories.entrySet().stream().map(e -> e.getValue()).collect(Collectors.toList());
    }

    /**
     * <p>deleteCategory</p>
     *
     * @param category a {@link RequisitionCategoryDTO} object.
     */
    public boolean deleteCategory(RequisitionCategoryDTO category) {
           return deleteCategory(category.getName());
    }

    /**
     * <p>deleteCategory</p>
     *
     * @param category a {@link String} object.
     */
    public boolean deleteCategory(final String category) {
        return (categories.remove(category) != null);
    }

    /**
     * <p>insertCategory</p>
     *
     * @param category a {@link RequisitionCategoryDTO} object.
     */
    public void insertCategory(RequisitionCategoryDTO category) {
       categories.put(category.getName(), category);
    }
}
