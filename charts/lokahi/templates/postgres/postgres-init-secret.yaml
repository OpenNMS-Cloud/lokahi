{{- if .Values.Postgres.Enabled }}
apiVersion: v1
kind: Secret # Currently stores passwords!
metadata:
  labels:
    app: {{ .Values.Postgres.ServiceName }}
  name: postgres-initial-sql
  namespace: {{ .Release.Namespace }}
stringData:
  postgres.initial.script.sql: |

    CREATE USER grafana with password '{{ .Values.Postgres.GrafanaPassword }}';
    CREATE DATABASE grafana;
    GRANT ALL ON DATABASE grafana TO grafana;

    CREATE USER opennms with password '{{ .Values.Postgres.OpenNMSPassword }}';
    CREATE DATABASE horizon_stream;
    GRANT ALL ON DATABASE horizon_stream TO opennms;

    \connect horizon_stream;

    CREATE USER keycloak with password '{{ .Values.Postgres.KeycloakPassword }}';
    CREATE SCHEMA IF NOT EXISTS keycloak AUTHORIZATION keycloak;

    CREATE USER inventory with password '{{ .Values.Postgres.InventoryPassword }}';
    CREATE SCHEMA IF NOT EXISTS inventory AUTHORIZATION inventory;

    CREATE USER alert with password '{{ .Values.Postgres.AlertPassword }}';
    CREATE SCHEMA IF NOT EXISTS alert AUTHORIZATION alert;

    CREATE USER notification with password '{{ .Values.Postgres.NotificationPassword }}';
    CREATE SCHEMA IF NOT EXISTS notification AUTHORIZATION notification;

    CREATE USER events with password '{{ .Values.Postgres.EventsPassword }}';
    CREATE SCHEMA IF NOT EXISTS events AUTHORIZATION events;

    CREATE USER datachoices with password '{{ .Values.Postgres.DataChoicesPassword }}';
    CREATE SCHEMA IF NOT EXISTS datachoices AUTHORIZATION datachoices;

    CREATE USER minion_gateway with password '{{ .Values.Postgres.MinionGatewayPassword }}';
    CREATE SCHEMA IF NOT EXISTS minion_gateway AUTHORIZATION minion_gateway;

    {{- if .Values.Postgres.addTestLocation }}
    INSERT INTO monitoring_location (tenant_id, location, latitude, longitude) values ('opennms-prime', 'TestLocation', 0, 0);
    {{- end }}

type: Opaque
{{- end }}
