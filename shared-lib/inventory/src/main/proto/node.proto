/*******************************************************************************
 * This file is part of OpenNMS(R).
 *
 * Copyright (C) 2022 The OpenNMS Group, Inc.
 * OpenNMS(R) is Copyright (C) 1999-2022 The OpenNMS Group, Inc.
 *
 * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.
 *
 * OpenNMS(R) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * OpenNMS(R) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with OpenNMS(R).  If not, see:
 *      http://www.gnu.org/licenses/
 *
 * For more information contact:
 *     OpenNMS(R) Licensing <license@opennms.org>
 *     http://www.opennms.org/
 *     http://www.opennms.com/
 *******************************************************************************/
syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "ipInterface.proto";
import "snmpInterface.proto";
import "tag.proto";

package opennms.inventory;
option java_multiple_files = true;
option java_package = "org.opennms.horizon.inventory.dto";

message NodeDTO {
  oneof node {
    DefaultNodeDTO default = 1;
    AzureNodeDTO azure = 2;
  }
}

message DefaultNodeDTO {
  int64 id = 1;
  string tenant_id = 2;
  string node_label = 3;
  int64 create_time = 4;
  int64 monitoring_location_id = 5;
  string monitoring_location = 6;
  repeated opennms.inventory.IpInterfaceDTO ip_interfaces = 7;
  string object_id = 8;
  string system_name = 9;
  string system_descr = 10;
  string system_location = 11;
  string system_contact = 12;
  repeated opennms.inventory.SnmpInterfaceDTO snmpInterfaces = 13;
  string scan_type = 14;
  optional MonitoredState monitored_state = 15;
}

message AzureNodeDTO {
  int64 id = 1;
  string tenant_id = 2;
  string node_label = 3;
  int64 create_time = 4;
  int64 monitoring_location_id = 5;
  string monitoring_location = 6;
  repeated opennms.inventory.IpInterfaceDTO ip_interfaces = 7;
  string scan_type = 8;
  optional MonitoredState monitored_state = 9;
}

message DefaultNodeCreateDTO {
  string label = 1;
  string location = 2;
  optional string management_ip = 3;
  repeated opennms.inventory.TagCreateDTO tags = 4;
  optional MonitoredState monitored_state = 5; // optional for now - may change
}

message AzureNodeCreateDTO {
  string label = 1;
  string location = 2;
  optional string management_ip = 3;
  repeated opennms.inventory.TagCreateDTO tags = 4;
  optional MonitoredState monitored_state = 5; // optional for now - may change
}

enum MonitoredState {
  DETECTED = 0;
}

message NodeList {
  repeated NodeDTO nodes = 1;
}

message NodeIdQuery {
  string location = 1;
  string ip_address = 2;
}

message MonitoredStateQuery {
  MonitoredState monitored_state = 1;
}

message TagNameQuery {
  repeated string tags = 1;
}

message NodeLabelSearchQuery {
  string searchTerm = 1;
}

message NodeIdList {
  repeated int64 ids = 1;
}

service NodeService {
  rpc listNodes(google.protobuf.Empty) returns (NodeList) {};
  rpc listNodesByNodeLabel(NodeLabelSearchQuery) returns (NodeList) {};
  rpc listNodesByMonitoredState(MonitoredStateQuery) returns (NodeList) {};
  rpc listNodesByTags(TagNameQuery) returns (NodeList) {};
  rpc getNodeById(google.protobuf.Int64Value) returns (NodeDTO) {};
  rpc getNodeIdFromQuery(NodeIdQuery) returns (google.protobuf.Int64Value) {};
  rpc deleteNode(google.protobuf.Int64Value) returns(google.protobuf.BoolValue) {};
  rpc startNodeScanByIds(NodeIdList) returns(google.protobuf.BoolValue) {};
  rpc getIpInterfaceById(google.protobuf.Int64Value) returns (IpInterfaceDTO) {};
  rpc getIpInterfaceFromQuery(NodeIdQuery) returns (IpInterfaceDTO) {};
}

service DefaultNodeService {
  rpc createNode(DefaultNodeCreateDTO) returns (DefaultNodeDTO) {};
}

service AzureNodeService {
  // intentionally empty, no grpc endpoints implemented for this type yet
}
