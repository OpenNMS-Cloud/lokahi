apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.Keycloak.ServiceName }}
  labels:
    app: keycloak
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: {{ .Values.Keycloak.ServiceName }}
  replicas: {{ .Values.Keycloak.Replicas }}
  template:
    metadata:
      labels:
        app: {{ .Values.Keycloak.ServiceName }}
    spec:
      {{- if .Values.NodeRestrictions.Enabled }}
      nodeSelector:
        {{ .Values.NodeRestrictions.Key }}: {{ .Values.NodeRestrictions.Value }}
      tolerations:
        - effect: "NoSchedule"
          key: "{{ .Values.NodeRestrictions.Key }}"
          operator: "Equal"
          value: {{ .Values.NodeRestrictions.Value }}
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            preference:
              matchExpressions:
              - key: "{{ .Values.NodeRestrictions.Key }}"
                operator: In
                values:
                - {{ .Values.NodeRestrictions.Value }}
      {{- end }}
      containers:
        - name: keycloak
          image: "{{ .Values.Keycloak.Image }}"
          imagePullPolicy: "{{ .Values.Keycloak.ImagePullPolicy }}"
          resources:
            limits:
              cpu: "{{ .Values.Keycloak.Resources.Limits.Cpu }}"
              memory: "{{ .Values.Keycloak.Resources.Limits.Memory }}"
            requests:
              cpu: "{{ .Values.Keycloak.Resources.Requests.Cpu }}"
              memory: "{{ .Values.Keycloak.Resources.Requests.Memory }}"
          args:
            - --import-realm
            {{- if .Values.OpenNMS.global.enableJsonLogging }}
            - --log-console-output=json
            {{- end }}
          env:
            - name: JAVA_TOOL_OPTIONS
              value: "-javaagent:/opt/keycloak/agent/opentelemetry-javaagent.jar"
            - name: KC_CACHE_STACK
              value: kubernetes
            - name: KC_CACHE
              value: ispn
            - name: KC_HOSTNAME
              value: "{{ .Values.Host }}"
            {{- if .Values.Keycloak.HostnamePort }}
            - name: KC_HOSTNAME_PORT
              value: "{{ .Values.Keycloak.HostnamePort }}"
            {{- end }}
            {{- if .Values.Keycloak.HostnameAdminUrl }}
            - name: KC_HOSTNAME_ADMIN_URL
              value: "{{ .Values.Keycloak.HostnameAdminUrl }}"
            {{- end }}
            - name: KC_DB_URL
              value: "jdbc:postgresql://{{ .Values.Keycloak.DbHost }}:5432/{{ .Values.Keycloak.DbName }}?currentSchema={{ .Values.Keycloak.DbSchemaName }}"
            - name: KC_DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: postgres
                  key: keycloakUser
            - name: KC_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres
                  key: keycloakPwd
            - name: KEYCLOAK_ADMIN
              valueFrom:
                secretKeyRef:
                  key: username
                  name: {{ .Values.Keycloak.ServiceName }}-initial-admin
            - name: KEYCLOAK_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: {{ .Values.Keycloak.ServiceName }}-initial-admin
            - name: KC_HOSTNAME_STRICT_BACKCHANNEL
              value: "false"
            - name: KC_HTTP_ENABLED
              value: "true"
            - name: KC_HTTP_RELATIVE_PATH
              value: "{{ .Values.Keycloak.Path }}"
            - name: KC_PROXY
              value: passthrough
            - name: jgroups.dns.query
              value: "{{ .Values.Keycloak.ServiceName }}.{{ .Release.Namespace }}"
            {{- if and .Values.TLS.Enabled .Values.Keycloak.TlsSecretName }}
            - name: KC_HTTPS_CERTIFICATE_FILE
              value: "/mnt/certificates/tls.crt"
            - name: KC_HTTPS_CERTIFICATE_KEY_FILE
              value: "/mnt/certificates/tls.key"
            {{- end }}
            {{- if .Values.OpenShift }}
            - name: KC_HOSTNAME_STRICT_HTTPS
              value: "false"
            {{- end }}
            {{- range $Variable, $Value := .Values.Keycloak.Environment }}
            - name: {{ $Variable | quote }}
              value: {{ $Value | quote }}
            {{- end }}
            {{- if .Values.OpenNMS.global.openTelemetry.otlpTracesEndpoint }}
            - name: OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
              value: {{ .Values.OpenNMS.global.openTelemetry.otlpTracesEndpoint | toYaml }}
            {{- else }}
            - name: OTEL_TRACES_EXPORTER
              value: "none"
            {{- end }}
            - name: OTEL_METRICS_EXPORTER
              value: "none"
            {{- if .Values.OpenNMS.global.openTelemetry.env }}
              {{- range $key, $val := .Values.OpenNMS.global.openTelemetry.env }}
            - name: {{ $key }}
              value: {{ $val | quote }}
              {{- end }}
            {{- end }}
            {{- include "deployment.env" .Values.Keycloak | nindent 12 }}
          ports:
            - name: http
              containerPort: {{ .Values.Keycloak.Port }}
            - name: https
              containerPort: {{ .Values.Keycloak.HttpsPort }}
          volumeMounts:
            {{- if and .Values.TLS.Enabled .Values.Keycloak.TlsSecretName }}
            - mountPath: /mnt/certificates
              name: keycloak-tls-certificates
            {{- end }}
            - mountPath: /opt/keycloak/data/import
              name: realm-config
          startupProbe:
            httpGet:
              {{- if and .Values.TLS.Enabled .Values.Keycloak.TlsSecretName }}
              scheme: HTTPS
              port: https
              {{- else }}
              scheme: HTTP
              port: http
              {{- end }}
              path: {{ .Values.Keycloak.Path }}/health/live
            failureThreshold: 150
            periodSeconds: 5
          livenessProbe:
            httpGet:
              {{- if and .Values.TLS.Enabled .Values.Keycloak.TlsSecretName }}
              scheme: HTTPS
              port: https
              {{- else }}
              scheme: HTTP
              port: http
              {{- end }}
              path: {{ .Values.Keycloak.Path }}/health/live
            failureThreshold: 150
            initialDelaySeconds: 20
            periodSeconds: 2
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            httpGet:
              {{- if and .Values.TLS.Enabled .Values.Keycloak.TlsSecretName }}
              scheme: HTTPS
              port: https
              {{- else }}
              scheme: HTTP
              port: http
              {{- end }}
              path: {{ .Values.Keycloak.Path }}/health/ready
            failureThreshold: 250
            initialDelaySeconds: 20
            periodSeconds: 2
            successThreshold: 1
            timeoutSeconds: 1
      {{- if .Values.Keycloak.PrivateRepoEnabled }}
      imagePullSecrets:
        - name: image-credentials
      {{- end }}
      volumes:
        {{- if and .Values.TLS.Enabled .Values.Keycloak.TlsSecretName }}
        - name: keycloak-tls-certificates
          secret:
            defaultMode: 420
            optional: false
            secretName: {{ .Values.Keycloak.TlsSecretName }}
        {{- end }}
        - name: realm-config
          configMap:
            name: {{ .Values.Keycloak.ConfigmapName }}
