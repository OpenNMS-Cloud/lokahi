{{- if .Values.citus.enabled }}
apiVersion: v1
kind: Secret # Currently stores passwords!
metadata:
  labels:
    app: {{ .Values.citus.serviceName }}
  name: citus-initial-sql
  namespace: {{ .Release.Namespace }}
stringData:
  postgres.initial.script.sql: |

    CREATE USER {{ .Values.citus.grafanaUser }} with password '{{ .Values.citus.grafanaPassword }}';
    CREATE DATABASE {{ .Values.citus.grafanaDatabaseName }};
    GRANT ALL ON DATABASE {{ .Values.citus.grafanaDatabaseName }} TO {{ .Values.citus.grafanaUser }};
    \connect {{ .Values.citus.grafanaDatabaseName }}
    GRANT ALL ON SCHEMA public TO {{ .Values.citus.grafanaUser }};

    \connect {{ .Values.citus.adminUser }}
    CREATE USER opennms with password '{{ .Values.citus.openNMSPassword }}';
    GRANT ALL ON DATABASE {{ .Values.citus.adminUser }} TO opennms;

    \connect {{ .Values.citus.adminUser }};

    CREATE USER keycloak with password '{{ .Values.citus.keycloakPassword }}';
    CREATE SCHEMA IF NOT EXISTS keycloak AUTHORIZATION keycloak;

    CREATE USER inventory with password '{{ .Values.citus.inventoryPassword }}';
    CREATE SCHEMA IF NOT EXISTS inventory AUTHORIZATION inventory;

    CREATE USER alert with password '{{ .Values.citus.alertPassword }}';
    CREATE SCHEMA IF NOT EXISTS alert AUTHORIZATION alert;

    CREATE USER notification with password '{{ .Values.citus.notificationPassword }}';
    CREATE SCHEMA IF NOT EXISTS notification AUTHORIZATION notification;

    CREATE USER events with password '{{ .Values.citus.eventsPassword }}';
    CREATE SCHEMA IF NOT EXISTS events AUTHORIZATION events;

    CREATE USER datachoices with password '{{ .Values.citus.dataChoicesPassword }}';
    CREATE SCHEMA IF NOT EXISTS datachoices AUTHORIZATION datachoices;

    CREATE USER minion_gateway with password '{{ .Values.citus.minionGatewayPassword }}';
    CREATE SCHEMA IF NOT EXISTS minion_gateway AUTHORIZATION minion_gateway;

type: Opaque
{{- end }}
