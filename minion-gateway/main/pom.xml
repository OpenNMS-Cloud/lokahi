<?xml version="1.0" encoding="utf-8" ?>
<!--
 - Licensed to The OpenNMS Group, Inc (TOG) under one or more
 - contributor license agreements.  See the LICENSE.md file
 - distributed with this work for additional information
 - regarding copyright ownership.
 -
 - TOG licenses this file to You under the GNU Affero General
 - Public License Version 3 (the "License") or (at your option)
 - any later version.  You may not use this file except in
 - compliance with the License.  You may obtain a copy of the
 - License at:
 -
 -      https://www.gnu.org/licenses/agpl-3.0.txt
 -
 - Unless required by applicable law or agreed to in writing,
 - software distributed under the License is distributed on an
 - "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 - either express or implied.  See the License for the specific
 - language governing permissions and limitations under the
 - License.
 -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.opennms.lokahi.minion.gateway</groupId>
    <artifactId>minion-gateway</artifactId>
    <version>1.0.0</version>
  </parent>

  <artifactId>minion-gateway-main</artifactId>

  <name>OpenNMS Lokahi :: Minion Gateway :: Main</name>
  <description>Main executable module for the Minion Gateway.</description>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-dependencies</artifactId>
        <version>${spring-boot.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <dependency>
      <groupId>org.opennms.lokahi.shared</groupId>
      <artifactId>spring-boot-logback-json</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>org.opennms.lokahi.minion.gateway</groupId>
      <artifactId>minion-gateway-ignite-detector-api</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>org.opennms.lokahi.minion.gateway</groupId>
      <artifactId>minion-gateway-ignite-detector-server</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>org.opennms.lokahi.minion.gateway</groupId>
      <artifactId>ipc-grpc-server</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>org.opennms.lokahi.shared</groupId>
      <artifactId>task-set-service-api</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>org.opennms.lokahi.minion.gateway</groupId>
      <artifactId>minion-gateway-ignite-detector-client</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>org.opennms.lokahi.shared</groupId>
      <artifactId>ignite-tasks</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>org.opennms.lokahi.shared</groupId>
      <artifactId>flows</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>org.opennms.lokahi.minion.gateway</groupId>
      <artifactId>task-set-service</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>org.opennms.lokahi.minion.gateway</groupId>
      <artifactId>rpc-request-server</artifactId>
      <version>${project.version}</version>
    </dependency>

    <dependency>
      <groupId>io.micrometer</groupId>
      <artifactId>micrometer-registry-prometheus</artifactId>
    </dependency>
    <dependency>
      <groupId>io.micrometer</groupId>
      <artifactId>micrometer-registry-jmx</artifactId>
    </dependency>
    <dependency>
      <groupId>io.micrometer</groupId>
      <artifactId>micrometer-core</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.ignite</groupId>
      <artifactId>ignite-kubernetes</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.ignite</groupId>
      <artifactId>ignite-spring</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-jdbc</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.kafka</groupId>
      <artifactId>spring-kafka</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-devtools</artifactId>
      <optional>true</optional>
    </dependency>
    <dependency>
      <groupId>com.github.java-json-tools</groupId>
      <artifactId>json-patch</artifactId>
    </dependency>
    <dependency>
      <groupId>com.google.protobuf</groupId>
      <artifactId>protobuf-java-util</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-lang3</artifactId>
    </dependency>
    <dependency>
      <groupId>org.postgresql</groupId>
      <artifactId>postgresql</artifactId>
    </dependency>
    <dependency>
      <groupId>com.h2database</groupId>
      <artifactId>h2</artifactId>
    </dependency>
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <version>${lombok.version}</version>
      <optional>true</optional>
    </dependency>
    <dependency>
      <groupId>io.opentelemetry</groupId>
      <artifactId>opentelemetry-api</artifactId>
    </dependency>
    <dependency>
      <groupId>io.opentelemetry.instrumentation</groupId>
      <artifactId>opentelemetry-instrumentation-annotations</artifactId>
    </dependency>
    <!-- test -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-test</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <id>copy</id>
            <goals>
              <goal>copy</goal>
            </goals>
            <phase>prepare-package</phase>
            <configuration>
              <artifactItems>
                <artifactItem>
                  <groupId>io.opentelemetry.javaagent</groupId>
                  <artifactId>opentelemetry-javaagent</artifactId>
                  <version>${opentelemetry.version}</version>
                  <type>jar</type>
                </artifactItem>
              </artifactItems>
              <stripVersion>true</stripVersion>
              <outputDirectory>${application.jib.extra.root}/agent</outputDirectory>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>com.google.cloud.tools</groupId>
        <artifactId>jib-maven-plugin</artifactId>
        <configuration>
          <!--suppress MavenModelInspection -->
          <skip>${application.docker.skip}</skip>
          <container>
            <jvmFlags>
              <jvmFlag>--add-opens=jdk.management/com.sun.management.internal=ALL-UNNAMED</jvmFlag>
              <jvmFlag>--add-opens=java.base/jdk.internal.misc=ALL-UNNAMED</jvmFlag>
              <jvmFlag>--add-opens=java.base/sun.nio.ch=ALL-UNNAMED</jvmFlag>
              <jvmFlag>--add-opens=java.management/com.sun.jmx.mbeanserver=ALL-UNNAMED</jvmFlag>
              <jvmFlag>--add-opens=jdk.internal.jvmstat/sun.jvmstat.monitor=ALL-UNNAMED</jvmFlag>
              <jvmFlag>--add-opens=java.base/sun.reflect.generics.reflectiveObjects=ALL-UNNAMED</jvmFlag>
              <jvmFlag>--add-opens=java.base/java.io=ALL-UNNAMED</jvmFlag>
              <jvmFlag>--add-opens=java.base/java.nio=ALL-UNNAMED</jvmFlag>
              <jvmFlag>--add-opens=java.base/java.util=ALL-UNNAMED</jvmFlag>
              <jvmFlag>--add-opens=java.base/java.lang=ALL-UNNAMED</jvmFlag>
              <jvmFlag>--add-opens=java.base/java.util.concurrent=ALL-UNNAMED</jvmFlag>
            </jvmFlags>
            <extraClasspath>
              <entry>${application.jib.app.config}</entry>
            </extraClasspath>
          </container>
          <extraDirectories>
            <paths>${application.jib.extra.root}</paths>
          </extraDirectories>
        </configuration>
        <executions>
          <execution>
            <id>build-docker-image</id>
            <goals>
              <goal>${application.jib.defaultGoal}</goal>
            </goals>
            <phase>install</phase>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
      </plugin>
    </plugins>
  </build>
</project>
